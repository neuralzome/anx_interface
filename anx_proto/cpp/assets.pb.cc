// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: assets.proto

#include "assets.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace anx {
PROTOBUF_CONSTEXPR AssetState::AssetState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.imu_)*/nullptr
  , /*decltype(_impl_.gnss_)*/nullptr
  , /*decltype(_impl_.camera_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AssetStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetStateDefaultTypeInternal() {}
  union {
    AssetState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetStateDefaultTypeInternal _AssetState_default_instance_;
PROTOBUF_CONSTEXPR DeviceImuSelect::DeviceImuSelect(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fps_)*/ {}
  ,/* _impl_._fps_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceImuSelectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceImuSelectDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceImuSelectDefaultTypeInternal() {}
  union {
    DeviceImuSelect _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceImuSelectDefaultTypeInternal _DeviceImuSelect_default_instance_;
PROTOBUF_CONSTEXPR DeviceGnssSelect::DeviceGnssSelect(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.available_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceGnssSelectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceGnssSelectDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceGnssSelectDefaultTypeInternal() {}
  union {
    DeviceGnssSelect _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceGnssSelectDefaultTypeInternal _DeviceGnssSelect_default_instance_;
PROTOBUF_CONSTEXPR DeviceCameraSelect::DeviceCameraSelect(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.camera_streams_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceCameraSelectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceCameraSelectDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceCameraSelectDefaultTypeInternal() {}
  union {
    DeviceCameraSelect _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceCameraSelectDefaultTypeInternal _DeviceCameraSelect_default_instance_;
PROTOBUF_CONSTEXPR DeviceCameraStream::DeviceCameraStream(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fps_)*/ 0u

  , /*decltype(_impl_.width_)*/ 0u

  , /*decltype(_impl_.height_)*/ 0u

  , /*decltype(_impl_.pixel_format_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceCameraStreamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceCameraStreamDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceCameraStreamDefaultTypeInternal() {}
  union {
    DeviceCameraStream _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceCameraStreamDefaultTypeInternal _DeviceCameraStream_default_instance_;
PROTOBUF_CONSTEXPR StartDeviceImu::StartDeviceImu(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fps_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StartDeviceImuDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartDeviceImuDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartDeviceImuDefaultTypeInternal() {}
  union {
    StartDeviceImu _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartDeviceImuDefaultTypeInternal _StartDeviceImu_default_instance_;
PROTOBUF_CONSTEXPR StartDeviceCamera::StartDeviceCamera(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.camera_stream_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StartDeviceCameraDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartDeviceCameraDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartDeviceCameraDefaultTypeInternal() {}
  union {
    StartDeviceCamera _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartDeviceCameraDefaultTypeInternal _StartDeviceCamera_default_instance_;
PROTOBUF_CONSTEXPR ImuData_Filtered::ImuData_Filtered(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.acceleration_)*/nullptr
  , /*decltype(_impl_.angular_velocity_)*/nullptr
  , /*decltype(_impl_.orientation_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImuData_FilteredDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImuData_FilteredDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImuData_FilteredDefaultTypeInternal() {}
  union {
    ImuData_Filtered _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImuData_FilteredDefaultTypeInternal _ImuData_Filtered_default_instance_;
PROTOBUF_CONSTEXPR ImuData_Raw::ImuData_Raw(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.acceleration_)*/nullptr
  , /*decltype(_impl_.angular_velocity_)*/nullptr
  , /*decltype(_impl_.magnetic_field_in_micro_tesla_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImuData_RawDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImuData_RawDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImuData_RawDefaultTypeInternal() {}
  union {
    ImuData_Raw _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImuData_RawDefaultTypeInternal _ImuData_Raw_default_instance_;
PROTOBUF_CONSTEXPR ImuData::ImuData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filtered_)*/nullptr
  , /*decltype(_impl_.raw_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImuDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImuDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImuDataDefaultTypeInternal() {}
  union {
    ImuData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImuDataDefaultTypeInternal _ImuData_default_instance_;
PROTOBUF_CONSTEXPR GnssData::GnssData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nmea_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GnssDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GnssDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GnssDataDefaultTypeInternal() {}
  union {
    GnssData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GnssDataDefaultTypeInternal _GnssData_default_instance_;
PROTOBUF_CONSTEXPR CameraData::CameraData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.image_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CameraDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CameraDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CameraDataDefaultTypeInternal() {}
  union {
    CameraData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CameraDataDefaultTypeInternal _CameraData_default_instance_;
}  // namespace anx
static ::_pb::Metadata file_level_metadata_assets_2eproto[12];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_assets_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_assets_2eproto = nullptr;
const ::uint32_t TableStruct_assets_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::anx::AssetState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anx::AssetState, _impl_.imu_),
    PROTOBUF_FIELD_OFFSET(::anx::AssetState, _impl_.gnss_),
    PROTOBUF_FIELD_OFFSET(::anx::AssetState, _impl_.camera_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::anx::DeviceImuSelect, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anx::DeviceImuSelect, _impl_.fps_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::anx::DeviceGnssSelect, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anx::DeviceGnssSelect, _impl_.available_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::anx::DeviceCameraSelect, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anx::DeviceCameraSelect, _impl_.camera_streams_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::anx::DeviceCameraStream, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anx::DeviceCameraStream, _impl_.fps_),
    PROTOBUF_FIELD_OFFSET(::anx::DeviceCameraStream, _impl_.width_),
    PROTOBUF_FIELD_OFFSET(::anx::DeviceCameraStream, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::anx::DeviceCameraStream, _impl_.pixel_format_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::anx::StartDeviceImu, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anx::StartDeviceImu, _impl_.fps_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::anx::StartDeviceCamera, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anx::StartDeviceCamera, _impl_.camera_stream_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::anx::ImuData_Filtered, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anx::ImuData_Filtered, _impl_.acceleration_),
    PROTOBUF_FIELD_OFFSET(::anx::ImuData_Filtered, _impl_.angular_velocity_),
    PROTOBUF_FIELD_OFFSET(::anx::ImuData_Filtered, _impl_.orientation_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::anx::ImuData_Raw, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anx::ImuData_Raw, _impl_.acceleration_),
    PROTOBUF_FIELD_OFFSET(::anx::ImuData_Raw, _impl_.angular_velocity_),
    PROTOBUF_FIELD_OFFSET(::anx::ImuData_Raw, _impl_.magnetic_field_in_micro_tesla_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::anx::ImuData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anx::ImuData, _impl_.filtered_),
    PROTOBUF_FIELD_OFFSET(::anx::ImuData, _impl_.raw_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::anx::GnssData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anx::GnssData, _impl_.nmea_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::anx::CameraData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anx::CameraData, _impl_.image_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::anx::AssetState)},
        { 11, -1, -1, sizeof(::anx::DeviceImuSelect)},
        { 20, -1, -1, sizeof(::anx::DeviceGnssSelect)},
        { 29, -1, -1, sizeof(::anx::DeviceCameraSelect)},
        { 38, -1, -1, sizeof(::anx::DeviceCameraStream)},
        { 50, -1, -1, sizeof(::anx::StartDeviceImu)},
        { 59, -1, -1, sizeof(::anx::StartDeviceCamera)},
        { 68, -1, -1, sizeof(::anx::ImuData_Filtered)},
        { 79, -1, -1, sizeof(::anx::ImuData_Raw)},
        { 90, -1, -1, sizeof(::anx::ImuData)},
        { 100, -1, -1, sizeof(::anx::GnssData)},
        { 109, -1, -1, sizeof(::anx::CameraData)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::anx::_AssetState_default_instance_._instance,
    &::anx::_DeviceImuSelect_default_instance_._instance,
    &::anx::_DeviceGnssSelect_default_instance_._instance,
    &::anx::_DeviceCameraSelect_default_instance_._instance,
    &::anx::_DeviceCameraStream_default_instance_._instance,
    &::anx::_StartDeviceImu_default_instance_._instance,
    &::anx::_StartDeviceCamera_default_instance_._instance,
    &::anx::_ImuData_Filtered_default_instance_._instance,
    &::anx::_ImuData_Raw_default_instance_._instance,
    &::anx::_ImuData_default_instance_._instance,
    &::anx::_GnssData_default_instance_._instance,
    &::anx::_CameraData_default_instance_._instance,
};
const char descriptor_table_protodef_assets_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\014assets.proto\022\003anx\032\014common.proto\"}\n\nAss"
    "etState\022!\n\003imu\030\001 \001(\0132\024.anx.DeviceImuSele"
    "ct\022#\n\004gnss\030\002 \001(\0132\025.anx.DeviceGnssSelect\022"
    "\'\n\006camera\030\003 \001(\0132\027.anx.DeviceCameraSelect"
    "\"\036\n\017DeviceImuSelect\022\013\n\003fps\030\001 \003(\r\"%\n\020Devi"
    "ceGnssSelect\022\021\n\tavailable\030\001 \001(\010\"E\n\022Devic"
    "eCameraSelect\022/\n\016camera_streams\030\001 \003(\0132\027."
    "anx.DeviceCameraStream\"\241\001\n\022DeviceCameraS"
    "tream\022\013\n\003fps\030\001 \001(\r\022\r\n\005width\030\002 \001(\r\022\016\n\006hei"
    "ght\030\003 \001(\r\0229\n\014pixel_format\030\004 \001(\0162#.anx.De"
    "viceCameraStream.PixelFormat\"$\n\013PixelFor"
    "mat\022\t\n\005MJPEG\020\000\022\n\n\006YUV420\020\001\"\035\n\016StartDevic"
    "eImu\022\013\n\003fps\030\001 \001(\r\"C\n\021StartDeviceCamera\022."
    "\n\rcamera_stream\030\001 \001(\0132\027.anx.DeviceCamera"
    "Stream\"\330\002\n\007ImuData\022\'\n\010filtered\030\001 \001(\0132\025.a"
    "nx.ImuData.Filtered\022\035\n\003raw\030\002 \001(\0132\020.anx.I"
    "muData.Raw\032|\n\010Filtered\022\"\n\014acceleration\030\001"
    " \001(\0132\014.anx.Vector3\022&\n\020angular_velocity\030\002"
    " \001(\0132\014.anx.Vector3\022$\n\013orientation\030\003 \001(\0132"
    "\017.anx.Quaternion\032\206\001\n\003Raw\022\"\n\014acceleration"
    "\030\001 \001(\0132\014.anx.Vector3\022&\n\020angular_velocity"
    "\030\002 \001(\0132\014.anx.Vector3\0223\n\035magnetic_field_i"
    "n_micro_tesla\030\003 \001(\0132\014.anx.Vector3\"\030\n\010Gns"
    "sData\022\014\n\004nmea\030\001 \001(\t\"\033\n\nCameraData\022\r\n\005ima"
    "ge\030\001 \001(\014B\033\n\031com.flomobility.anx.protob\006p"
    "roto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_assets_2eproto_deps[1] =
    {
        &::descriptor_table_common_2eproto,
};
static ::absl::once_flag descriptor_table_assets_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_assets_2eproto = {
    false,
    false,
    1005,
    descriptor_table_protodef_assets_2eproto,
    "assets.proto",
    &descriptor_table_assets_2eproto_once,
    descriptor_table_assets_2eproto_deps,
    1,
    12,
    schemas,
    file_default_instances,
    TableStruct_assets_2eproto::offsets,
    file_level_metadata_assets_2eproto,
    file_level_enum_descriptors_assets_2eproto,
    file_level_service_descriptors_assets_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_assets_2eproto_getter() {
  return &descriptor_table_assets_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_assets_2eproto(&descriptor_table_assets_2eproto);
namespace anx {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceCameraStream_PixelFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_assets_2eproto);
  return file_level_enum_descriptors_assets_2eproto[0];
}
bool DeviceCameraStream_PixelFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr DeviceCameraStream_PixelFormat DeviceCameraStream::MJPEG;
constexpr DeviceCameraStream_PixelFormat DeviceCameraStream::YUV420;
constexpr DeviceCameraStream_PixelFormat DeviceCameraStream::PixelFormat_MIN;
constexpr DeviceCameraStream_PixelFormat DeviceCameraStream::PixelFormat_MAX;
constexpr int DeviceCameraStream::PixelFormat_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class AssetState::_Internal {
 public:
  static const ::anx::DeviceImuSelect& imu(const AssetState* msg);
  static const ::anx::DeviceGnssSelect& gnss(const AssetState* msg);
  static const ::anx::DeviceCameraSelect& camera(const AssetState* msg);
};

const ::anx::DeviceImuSelect&
AssetState::_Internal::imu(const AssetState* msg) {
  return *msg->_impl_.imu_;
}
const ::anx::DeviceGnssSelect&
AssetState::_Internal::gnss(const AssetState* msg) {
  return *msg->_impl_.gnss_;
}
const ::anx::DeviceCameraSelect&
AssetState::_Internal::camera(const AssetState* msg) {
  return *msg->_impl_.camera_;
}
AssetState::AssetState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anx.AssetState)
}
AssetState::AssetState(const AssetState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AssetState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.imu_){nullptr}
    , decltype(_impl_.gnss_){nullptr}
    , decltype(_impl_.camera_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_imu()) {
    _this->_impl_.imu_ = new ::anx::DeviceImuSelect(*from._impl_.imu_);
  }
  if (from._internal_has_gnss()) {
    _this->_impl_.gnss_ = new ::anx::DeviceGnssSelect(*from._impl_.gnss_);
  }
  if (from._internal_has_camera()) {
    _this->_impl_.camera_ = new ::anx::DeviceCameraSelect(*from._impl_.camera_);
  }
  // @@protoc_insertion_point(copy_constructor:anx.AssetState)
}

inline void AssetState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.imu_){nullptr}
    , decltype(_impl_.gnss_){nullptr}
    , decltype(_impl_.camera_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AssetState::~AssetState() {
  // @@protoc_insertion_point(destructor:anx.AssetState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AssetState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.imu_;
  if (this != internal_default_instance()) delete _impl_.gnss_;
  if (this != internal_default_instance()) delete _impl_.camera_;
}

void AssetState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AssetState::Clear() {
// @@protoc_insertion_point(message_clear_start:anx.AssetState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.imu_ != nullptr) {
    delete _impl_.imu_;
  }
  _impl_.imu_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.gnss_ != nullptr) {
    delete _impl_.gnss_;
  }
  _impl_.gnss_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.camera_ != nullptr) {
    delete _impl_.camera_;
  }
  _impl_.camera_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssetState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .anx.DeviceImuSelect imu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_imu(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .anx.DeviceGnssSelect gnss = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gnss(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .anx.DeviceCameraSelect camera = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_camera(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AssetState::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anx.AssetState)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .anx.DeviceImuSelect imu = 1;
  if (this->_internal_has_imu()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::imu(this),
        _Internal::imu(this).GetCachedSize(), target, stream);
  }

  // .anx.DeviceGnssSelect gnss = 2;
  if (this->_internal_has_gnss()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::gnss(this),
        _Internal::gnss(this).GetCachedSize(), target, stream);
  }

  // .anx.DeviceCameraSelect camera = 3;
  if (this->_internal_has_camera()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::camera(this),
        _Internal::camera(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anx.AssetState)
  return target;
}

::size_t AssetState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anx.AssetState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .anx.DeviceImuSelect imu = 1;
  if (this->_internal_has_imu()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.imu_);
  }

  // .anx.DeviceGnssSelect gnss = 2;
  if (this->_internal_has_gnss()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gnss_);
  }

  // .anx.DeviceCameraSelect camera = 3;
  if (this->_internal_has_camera()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.camera_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssetState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AssetState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssetState::GetClassData() const { return &_class_data_; }


void AssetState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AssetState*>(&to_msg);
  auto& from = static_cast<const AssetState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anx.AssetState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_imu()) {
    _this->_internal_mutable_imu()->::anx::DeviceImuSelect::MergeFrom(
        from._internal_imu());
  }
  if (from._internal_has_gnss()) {
    _this->_internal_mutable_gnss()->::anx::DeviceGnssSelect::MergeFrom(
        from._internal_gnss());
  }
  if (from._internal_has_camera()) {
    _this->_internal_mutable_camera()->::anx::DeviceCameraSelect::MergeFrom(
        from._internal_camera());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssetState::CopyFrom(const AssetState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anx.AssetState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetState::IsInitialized() const {
  return true;
}

void AssetState::InternalSwap(AssetState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AssetState, _impl_.camera_)
      + sizeof(AssetState::_impl_.camera_)
      - PROTOBUF_FIELD_OFFSET(AssetState, _impl_.imu_)>(
          reinterpret_cast<char*>(&_impl_.imu_),
          reinterpret_cast<char*>(&other->_impl_.imu_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AssetState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_assets_2eproto_getter, &descriptor_table_assets_2eproto_once,
      file_level_metadata_assets_2eproto[0]);
}
// ===================================================================

class DeviceImuSelect::_Internal {
 public:
};

DeviceImuSelect::DeviceImuSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anx.DeviceImuSelect)
}
DeviceImuSelect::DeviceImuSelect(const DeviceImuSelect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceImuSelect* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fps_) { from._impl_.fps_ }
    ,/* _impl_._fps_cached_byte_size_ = */ { 0 }

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:anx.DeviceImuSelect)
}

inline void DeviceImuSelect::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.fps_) { arena }
    ,/* _impl_._fps_cached_byte_size_ = */ { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeviceImuSelect::~DeviceImuSelect() {
  // @@protoc_insertion_point(destructor:anx.DeviceImuSelect)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceImuSelect::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fps_.~RepeatedField();
}

void DeviceImuSelect::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceImuSelect::Clear() {
// @@protoc_insertion_point(message_clear_start:anx.DeviceImuSelect)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fps_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceImuSelect::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 fps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_fps(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 8) {
          _internal_add_fps(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DeviceImuSelect::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anx.DeviceImuSelect)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 fps = 1;
  {
    int byte_size = _impl_._fps_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(1, _internal_fps(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anx.DeviceImuSelect)
  return target;
}

::size_t DeviceImuSelect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anx.DeviceImuSelect)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 fps = 1;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(this->_impl_.fps_)
    ;
    _impl_._fps_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceImuSelect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceImuSelect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceImuSelect::GetClassData() const { return &_class_data_; }


void DeviceImuSelect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceImuSelect*>(&to_msg);
  auto& from = static_cast<const DeviceImuSelect&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anx.DeviceImuSelect)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.fps_.MergeFrom(from._impl_.fps_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceImuSelect::CopyFrom(const DeviceImuSelect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anx.DeviceImuSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceImuSelect::IsInitialized() const {
  return true;
}

void DeviceImuSelect::InternalSwap(DeviceImuSelect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.fps_.InternalSwap(&other->_impl_.fps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceImuSelect::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_assets_2eproto_getter, &descriptor_table_assets_2eproto_once,
      file_level_metadata_assets_2eproto[1]);
}
// ===================================================================

class DeviceGnssSelect::_Internal {
 public:
};

DeviceGnssSelect::DeviceGnssSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anx.DeviceGnssSelect)
}
DeviceGnssSelect::DeviceGnssSelect(const DeviceGnssSelect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:anx.DeviceGnssSelect)
}

inline void DeviceGnssSelect::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.available_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeviceGnssSelect::~DeviceGnssSelect() {
  // @@protoc_insertion_point(destructor:anx.DeviceGnssSelect)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceGnssSelect::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeviceGnssSelect::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceGnssSelect::Clear() {
// @@protoc_insertion_point(message_clear_start:anx.DeviceGnssSelect)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.available_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceGnssSelect::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool available = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DeviceGnssSelect::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anx.DeviceGnssSelect)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool available = 1;
  if (this->_internal_available() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_available(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anx.DeviceGnssSelect)
  return target;
}

::size_t DeviceGnssSelect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anx.DeviceGnssSelect)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool available = 1;
  if (this->_internal_available() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceGnssSelect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceGnssSelect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceGnssSelect::GetClassData() const { return &_class_data_; }


void DeviceGnssSelect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceGnssSelect*>(&to_msg);
  auto& from = static_cast<const DeviceGnssSelect&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anx.DeviceGnssSelect)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_available() != 0) {
    _this->_internal_set_available(from._internal_available());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceGnssSelect::CopyFrom(const DeviceGnssSelect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anx.DeviceGnssSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceGnssSelect::IsInitialized() const {
  return true;
}

void DeviceGnssSelect::InternalSwap(DeviceGnssSelect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.available_, other->_impl_.available_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceGnssSelect::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_assets_2eproto_getter, &descriptor_table_assets_2eproto_once,
      file_level_metadata_assets_2eproto[2]);
}
// ===================================================================

class DeviceCameraSelect::_Internal {
 public:
};

DeviceCameraSelect::DeviceCameraSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anx.DeviceCameraSelect)
}
DeviceCameraSelect::DeviceCameraSelect(const DeviceCameraSelect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceCameraSelect* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.camera_streams_){from._impl_.camera_streams_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:anx.DeviceCameraSelect)
}

inline void DeviceCameraSelect::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.camera_streams_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeviceCameraSelect::~DeviceCameraSelect() {
  // @@protoc_insertion_point(destructor:anx.DeviceCameraSelect)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceCameraSelect::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.camera_streams_.~RepeatedPtrField();
}

void DeviceCameraSelect::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceCameraSelect::Clear() {
// @@protoc_insertion_point(message_clear_start:anx.DeviceCameraSelect)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.camera_streams_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceCameraSelect::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .anx.DeviceCameraStream camera_streams = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_camera_streams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DeviceCameraSelect::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anx.DeviceCameraSelect)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .anx.DeviceCameraStream camera_streams = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_camera_streams_size()); i < n; i++) {
    const auto& repfield = this->_internal_camera_streams(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anx.DeviceCameraSelect)
  return target;
}

::size_t DeviceCameraSelect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anx.DeviceCameraSelect)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .anx.DeviceCameraStream camera_streams = 1;
  total_size += 1UL * this->_internal_camera_streams_size();
  for (const auto& msg : this->_impl_.camera_streams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceCameraSelect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceCameraSelect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceCameraSelect::GetClassData() const { return &_class_data_; }


void DeviceCameraSelect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceCameraSelect*>(&to_msg);
  auto& from = static_cast<const DeviceCameraSelect&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anx.DeviceCameraSelect)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.camera_streams_.MergeFrom(from._impl_.camera_streams_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceCameraSelect::CopyFrom(const DeviceCameraSelect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anx.DeviceCameraSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceCameraSelect::IsInitialized() const {
  return true;
}

void DeviceCameraSelect::InternalSwap(DeviceCameraSelect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.camera_streams_.InternalSwap(&other->_impl_.camera_streams_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceCameraSelect::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_assets_2eproto_getter, &descriptor_table_assets_2eproto_once,
      file_level_metadata_assets_2eproto[3]);
}
// ===================================================================

class DeviceCameraStream::_Internal {
 public:
};

DeviceCameraStream::DeviceCameraStream(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anx.DeviceCameraStream)
}
DeviceCameraStream::DeviceCameraStream(const DeviceCameraStream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:anx.DeviceCameraStream)
}

inline void DeviceCameraStream::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.fps_) { 0u }

    , decltype(_impl_.width_) { 0u }

    , decltype(_impl_.height_) { 0u }

    , decltype(_impl_.pixel_format_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeviceCameraStream::~DeviceCameraStream() {
  // @@protoc_insertion_point(destructor:anx.DeviceCameraStream)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceCameraStream::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeviceCameraStream::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceCameraStream::Clear() {
// @@protoc_insertion_point(message_clear_start:anx.DeviceCameraStream)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.fps_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.pixel_format_) -
      reinterpret_cast<char*>(&_impl_.fps_)) + sizeof(_impl_.pixel_format_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceCameraStream::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 fps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.fps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .anx.DeviceCameraStream.PixelFormat pixel_format = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_pixel_format(static_cast<::anx::DeviceCameraStream_PixelFormat>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DeviceCameraStream::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anx.DeviceCameraStream)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fps = 1;
  if (this->_internal_fps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_fps(), target);
  }

  // uint32 width = 2;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_width(), target);
  }

  // uint32 height = 3;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_height(), target);
  }

  // .anx.DeviceCameraStream.PixelFormat pixel_format = 4;
  if (this->_internal_pixel_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_pixel_format(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anx.DeviceCameraStream)
  return target;
}

::size_t DeviceCameraStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anx.DeviceCameraStream)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 fps = 1;
  if (this->_internal_fps() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_fps());
  }

  // uint32 width = 2;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_width());
  }

  // uint32 height = 3;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_height());
  }

  // .anx.DeviceCameraStream.PixelFormat pixel_format = 4;
  if (this->_internal_pixel_format() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_pixel_format());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceCameraStream::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceCameraStream::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceCameraStream::GetClassData() const { return &_class_data_; }


void DeviceCameraStream::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceCameraStream*>(&to_msg);
  auto& from = static_cast<const DeviceCameraStream&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anx.DeviceCameraStream)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_fps() != 0) {
    _this->_internal_set_fps(from._internal_fps());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_pixel_format() != 0) {
    _this->_internal_set_pixel_format(from._internal_pixel_format());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceCameraStream::CopyFrom(const DeviceCameraStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anx.DeviceCameraStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceCameraStream::IsInitialized() const {
  return true;
}

void DeviceCameraStream::InternalSwap(DeviceCameraStream* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceCameraStream, _impl_.pixel_format_)
      + sizeof(DeviceCameraStream::_impl_.pixel_format_)
      - PROTOBUF_FIELD_OFFSET(DeviceCameraStream, _impl_.fps_)>(
          reinterpret_cast<char*>(&_impl_.fps_),
          reinterpret_cast<char*>(&other->_impl_.fps_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceCameraStream::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_assets_2eproto_getter, &descriptor_table_assets_2eproto_once,
      file_level_metadata_assets_2eproto[4]);
}
// ===================================================================

class StartDeviceImu::_Internal {
 public:
};

StartDeviceImu::StartDeviceImu(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anx.StartDeviceImu)
}
StartDeviceImu::StartDeviceImu(const StartDeviceImu& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:anx.StartDeviceImu)
}

inline void StartDeviceImu::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.fps_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StartDeviceImu::~StartDeviceImu() {
  // @@protoc_insertion_point(destructor:anx.StartDeviceImu)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartDeviceImu::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void StartDeviceImu::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StartDeviceImu::Clear() {
// @@protoc_insertion_point(message_clear_start:anx.StartDeviceImu)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fps_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartDeviceImu::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 fps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.fps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StartDeviceImu::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anx.StartDeviceImu)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fps = 1;
  if (this->_internal_fps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_fps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anx.StartDeviceImu)
  return target;
}

::size_t StartDeviceImu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anx.StartDeviceImu)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 fps = 1;
  if (this->_internal_fps() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_fps());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartDeviceImu::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StartDeviceImu::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartDeviceImu::GetClassData() const { return &_class_data_; }


void StartDeviceImu::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StartDeviceImu*>(&to_msg);
  auto& from = static_cast<const StartDeviceImu&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anx.StartDeviceImu)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_fps() != 0) {
    _this->_internal_set_fps(from._internal_fps());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartDeviceImu::CopyFrom(const StartDeviceImu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anx.StartDeviceImu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartDeviceImu::IsInitialized() const {
  return true;
}

void StartDeviceImu::InternalSwap(StartDeviceImu* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.fps_, other->_impl_.fps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartDeviceImu::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_assets_2eproto_getter, &descriptor_table_assets_2eproto_once,
      file_level_metadata_assets_2eproto[5]);
}
// ===================================================================

class StartDeviceCamera::_Internal {
 public:
  static const ::anx::DeviceCameraStream& camera_stream(const StartDeviceCamera* msg);
};

const ::anx::DeviceCameraStream&
StartDeviceCamera::_Internal::camera_stream(const StartDeviceCamera* msg) {
  return *msg->_impl_.camera_stream_;
}
StartDeviceCamera::StartDeviceCamera(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anx.StartDeviceCamera)
}
StartDeviceCamera::StartDeviceCamera(const StartDeviceCamera& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StartDeviceCamera* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.camera_stream_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_camera_stream()) {
    _this->_impl_.camera_stream_ = new ::anx::DeviceCameraStream(*from._impl_.camera_stream_);
  }
  // @@protoc_insertion_point(copy_constructor:anx.StartDeviceCamera)
}

inline void StartDeviceCamera::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.camera_stream_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StartDeviceCamera::~StartDeviceCamera() {
  // @@protoc_insertion_point(destructor:anx.StartDeviceCamera)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartDeviceCamera::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.camera_stream_;
}

void StartDeviceCamera::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StartDeviceCamera::Clear() {
// @@protoc_insertion_point(message_clear_start:anx.StartDeviceCamera)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.camera_stream_ != nullptr) {
    delete _impl_.camera_stream_;
  }
  _impl_.camera_stream_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartDeviceCamera::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .anx.DeviceCameraStream camera_stream = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_camera_stream(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StartDeviceCamera::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anx.StartDeviceCamera)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .anx.DeviceCameraStream camera_stream = 1;
  if (this->_internal_has_camera_stream()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::camera_stream(this),
        _Internal::camera_stream(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anx.StartDeviceCamera)
  return target;
}

::size_t StartDeviceCamera::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anx.StartDeviceCamera)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .anx.DeviceCameraStream camera_stream = 1;
  if (this->_internal_has_camera_stream()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.camera_stream_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartDeviceCamera::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StartDeviceCamera::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartDeviceCamera::GetClassData() const { return &_class_data_; }


void StartDeviceCamera::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StartDeviceCamera*>(&to_msg);
  auto& from = static_cast<const StartDeviceCamera&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anx.StartDeviceCamera)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_camera_stream()) {
    _this->_internal_mutable_camera_stream()->::anx::DeviceCameraStream::MergeFrom(
        from._internal_camera_stream());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartDeviceCamera::CopyFrom(const StartDeviceCamera& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anx.StartDeviceCamera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartDeviceCamera::IsInitialized() const {
  return true;
}

void StartDeviceCamera::InternalSwap(StartDeviceCamera* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.camera_stream_, other->_impl_.camera_stream_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartDeviceCamera::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_assets_2eproto_getter, &descriptor_table_assets_2eproto_once,
      file_level_metadata_assets_2eproto[6]);
}
// ===================================================================

class ImuData_Filtered::_Internal {
 public:
  static const ::anx::Vector3& acceleration(const ImuData_Filtered* msg);
  static const ::anx::Vector3& angular_velocity(const ImuData_Filtered* msg);
  static const ::anx::Quaternion& orientation(const ImuData_Filtered* msg);
};

const ::anx::Vector3&
ImuData_Filtered::_Internal::acceleration(const ImuData_Filtered* msg) {
  return *msg->_impl_.acceleration_;
}
const ::anx::Vector3&
ImuData_Filtered::_Internal::angular_velocity(const ImuData_Filtered* msg) {
  return *msg->_impl_.angular_velocity_;
}
const ::anx::Quaternion&
ImuData_Filtered::_Internal::orientation(const ImuData_Filtered* msg) {
  return *msg->_impl_.orientation_;
}
void ImuData_Filtered::clear_acceleration() {
  if (GetArenaForAllocation() == nullptr && _impl_.acceleration_ != nullptr) {
    delete _impl_.acceleration_;
  }
  _impl_.acceleration_ = nullptr;
}
void ImuData_Filtered::clear_angular_velocity() {
  if (GetArenaForAllocation() == nullptr && _impl_.angular_velocity_ != nullptr) {
    delete _impl_.angular_velocity_;
  }
  _impl_.angular_velocity_ = nullptr;
}
void ImuData_Filtered::clear_orientation() {
  if (GetArenaForAllocation() == nullptr && _impl_.orientation_ != nullptr) {
    delete _impl_.orientation_;
  }
  _impl_.orientation_ = nullptr;
}
ImuData_Filtered::ImuData_Filtered(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anx.ImuData.Filtered)
}
ImuData_Filtered::ImuData_Filtered(const ImuData_Filtered& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImuData_Filtered* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.acceleration_){nullptr}
    , decltype(_impl_.angular_velocity_){nullptr}
    , decltype(_impl_.orientation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_acceleration()) {
    _this->_impl_.acceleration_ = new ::anx::Vector3(*from._impl_.acceleration_);
  }
  if (from._internal_has_angular_velocity()) {
    _this->_impl_.angular_velocity_ = new ::anx::Vector3(*from._impl_.angular_velocity_);
  }
  if (from._internal_has_orientation()) {
    _this->_impl_.orientation_ = new ::anx::Quaternion(*from._impl_.orientation_);
  }
  // @@protoc_insertion_point(copy_constructor:anx.ImuData.Filtered)
}

inline void ImuData_Filtered::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.acceleration_){nullptr}
    , decltype(_impl_.angular_velocity_){nullptr}
    , decltype(_impl_.orientation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ImuData_Filtered::~ImuData_Filtered() {
  // @@protoc_insertion_point(destructor:anx.ImuData.Filtered)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImuData_Filtered::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.acceleration_;
  if (this != internal_default_instance()) delete _impl_.angular_velocity_;
  if (this != internal_default_instance()) delete _impl_.orientation_;
}

void ImuData_Filtered::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImuData_Filtered::Clear() {
// @@protoc_insertion_point(message_clear_start:anx.ImuData.Filtered)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.acceleration_ != nullptr) {
    delete _impl_.acceleration_;
  }
  _impl_.acceleration_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.angular_velocity_ != nullptr) {
    delete _impl_.angular_velocity_;
  }
  _impl_.angular_velocity_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.orientation_ != nullptr) {
    delete _impl_.orientation_;
  }
  _impl_.orientation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImuData_Filtered::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .anx.Vector3 acceleration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_acceleration(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .anx.Vector3 angular_velocity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular_velocity(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .anx.Quaternion orientation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ImuData_Filtered::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anx.ImuData.Filtered)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .anx.Vector3 acceleration = 1;
  if (this->_internal_has_acceleration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::acceleration(this),
        _Internal::acceleration(this).GetCachedSize(), target, stream);
  }

  // .anx.Vector3 angular_velocity = 2;
  if (this->_internal_has_angular_velocity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::angular_velocity(this),
        _Internal::angular_velocity(this).GetCachedSize(), target, stream);
  }

  // .anx.Quaternion orientation = 3;
  if (this->_internal_has_orientation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::orientation(this),
        _Internal::orientation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anx.ImuData.Filtered)
  return target;
}

::size_t ImuData_Filtered::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anx.ImuData.Filtered)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .anx.Vector3 acceleration = 1;
  if (this->_internal_has_acceleration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.acceleration_);
  }

  // .anx.Vector3 angular_velocity = 2;
  if (this->_internal_has_angular_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.angular_velocity_);
  }

  // .anx.Quaternion orientation = 3;
  if (this->_internal_has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.orientation_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImuData_Filtered::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImuData_Filtered::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImuData_Filtered::GetClassData() const { return &_class_data_; }


void ImuData_Filtered::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImuData_Filtered*>(&to_msg);
  auto& from = static_cast<const ImuData_Filtered&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anx.ImuData.Filtered)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_acceleration()) {
    _this->_internal_mutable_acceleration()->::anx::Vector3::MergeFrom(
        from._internal_acceleration());
  }
  if (from._internal_has_angular_velocity()) {
    _this->_internal_mutable_angular_velocity()->::anx::Vector3::MergeFrom(
        from._internal_angular_velocity());
  }
  if (from._internal_has_orientation()) {
    _this->_internal_mutable_orientation()->::anx::Quaternion::MergeFrom(
        from._internal_orientation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImuData_Filtered::CopyFrom(const ImuData_Filtered& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anx.ImuData.Filtered)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImuData_Filtered::IsInitialized() const {
  return true;
}

void ImuData_Filtered::InternalSwap(ImuData_Filtered* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImuData_Filtered, _impl_.orientation_)
      + sizeof(ImuData_Filtered::_impl_.orientation_)
      - PROTOBUF_FIELD_OFFSET(ImuData_Filtered, _impl_.acceleration_)>(
          reinterpret_cast<char*>(&_impl_.acceleration_),
          reinterpret_cast<char*>(&other->_impl_.acceleration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImuData_Filtered::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_assets_2eproto_getter, &descriptor_table_assets_2eproto_once,
      file_level_metadata_assets_2eproto[7]);
}
// ===================================================================

class ImuData_Raw::_Internal {
 public:
  static const ::anx::Vector3& acceleration(const ImuData_Raw* msg);
  static const ::anx::Vector3& angular_velocity(const ImuData_Raw* msg);
  static const ::anx::Vector3& magnetic_field_in_micro_tesla(const ImuData_Raw* msg);
};

const ::anx::Vector3&
ImuData_Raw::_Internal::acceleration(const ImuData_Raw* msg) {
  return *msg->_impl_.acceleration_;
}
const ::anx::Vector3&
ImuData_Raw::_Internal::angular_velocity(const ImuData_Raw* msg) {
  return *msg->_impl_.angular_velocity_;
}
const ::anx::Vector3&
ImuData_Raw::_Internal::magnetic_field_in_micro_tesla(const ImuData_Raw* msg) {
  return *msg->_impl_.magnetic_field_in_micro_tesla_;
}
void ImuData_Raw::clear_acceleration() {
  if (GetArenaForAllocation() == nullptr && _impl_.acceleration_ != nullptr) {
    delete _impl_.acceleration_;
  }
  _impl_.acceleration_ = nullptr;
}
void ImuData_Raw::clear_angular_velocity() {
  if (GetArenaForAllocation() == nullptr && _impl_.angular_velocity_ != nullptr) {
    delete _impl_.angular_velocity_;
  }
  _impl_.angular_velocity_ = nullptr;
}
void ImuData_Raw::clear_magnetic_field_in_micro_tesla() {
  if (GetArenaForAllocation() == nullptr && _impl_.magnetic_field_in_micro_tesla_ != nullptr) {
    delete _impl_.magnetic_field_in_micro_tesla_;
  }
  _impl_.magnetic_field_in_micro_tesla_ = nullptr;
}
ImuData_Raw::ImuData_Raw(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anx.ImuData.Raw)
}
ImuData_Raw::ImuData_Raw(const ImuData_Raw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImuData_Raw* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.acceleration_){nullptr}
    , decltype(_impl_.angular_velocity_){nullptr}
    , decltype(_impl_.magnetic_field_in_micro_tesla_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_acceleration()) {
    _this->_impl_.acceleration_ = new ::anx::Vector3(*from._impl_.acceleration_);
  }
  if (from._internal_has_angular_velocity()) {
    _this->_impl_.angular_velocity_ = new ::anx::Vector3(*from._impl_.angular_velocity_);
  }
  if (from._internal_has_magnetic_field_in_micro_tesla()) {
    _this->_impl_.magnetic_field_in_micro_tesla_ = new ::anx::Vector3(*from._impl_.magnetic_field_in_micro_tesla_);
  }
  // @@protoc_insertion_point(copy_constructor:anx.ImuData.Raw)
}

inline void ImuData_Raw::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.acceleration_){nullptr}
    , decltype(_impl_.angular_velocity_){nullptr}
    , decltype(_impl_.magnetic_field_in_micro_tesla_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ImuData_Raw::~ImuData_Raw() {
  // @@protoc_insertion_point(destructor:anx.ImuData.Raw)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImuData_Raw::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.acceleration_;
  if (this != internal_default_instance()) delete _impl_.angular_velocity_;
  if (this != internal_default_instance()) delete _impl_.magnetic_field_in_micro_tesla_;
}

void ImuData_Raw::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImuData_Raw::Clear() {
// @@protoc_insertion_point(message_clear_start:anx.ImuData.Raw)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.acceleration_ != nullptr) {
    delete _impl_.acceleration_;
  }
  _impl_.acceleration_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.angular_velocity_ != nullptr) {
    delete _impl_.angular_velocity_;
  }
  _impl_.angular_velocity_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.magnetic_field_in_micro_tesla_ != nullptr) {
    delete _impl_.magnetic_field_in_micro_tesla_;
  }
  _impl_.magnetic_field_in_micro_tesla_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImuData_Raw::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .anx.Vector3 acceleration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_acceleration(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .anx.Vector3 angular_velocity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular_velocity(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .anx.Vector3 magnetic_field_in_micro_tesla = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_magnetic_field_in_micro_tesla(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ImuData_Raw::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anx.ImuData.Raw)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .anx.Vector3 acceleration = 1;
  if (this->_internal_has_acceleration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::acceleration(this),
        _Internal::acceleration(this).GetCachedSize(), target, stream);
  }

  // .anx.Vector3 angular_velocity = 2;
  if (this->_internal_has_angular_velocity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::angular_velocity(this),
        _Internal::angular_velocity(this).GetCachedSize(), target, stream);
  }

  // .anx.Vector3 magnetic_field_in_micro_tesla = 3;
  if (this->_internal_has_magnetic_field_in_micro_tesla()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::magnetic_field_in_micro_tesla(this),
        _Internal::magnetic_field_in_micro_tesla(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anx.ImuData.Raw)
  return target;
}

::size_t ImuData_Raw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anx.ImuData.Raw)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .anx.Vector3 acceleration = 1;
  if (this->_internal_has_acceleration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.acceleration_);
  }

  // .anx.Vector3 angular_velocity = 2;
  if (this->_internal_has_angular_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.angular_velocity_);
  }

  // .anx.Vector3 magnetic_field_in_micro_tesla = 3;
  if (this->_internal_has_magnetic_field_in_micro_tesla()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.magnetic_field_in_micro_tesla_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImuData_Raw::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImuData_Raw::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImuData_Raw::GetClassData() const { return &_class_data_; }


void ImuData_Raw::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImuData_Raw*>(&to_msg);
  auto& from = static_cast<const ImuData_Raw&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anx.ImuData.Raw)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_acceleration()) {
    _this->_internal_mutable_acceleration()->::anx::Vector3::MergeFrom(
        from._internal_acceleration());
  }
  if (from._internal_has_angular_velocity()) {
    _this->_internal_mutable_angular_velocity()->::anx::Vector3::MergeFrom(
        from._internal_angular_velocity());
  }
  if (from._internal_has_magnetic_field_in_micro_tesla()) {
    _this->_internal_mutable_magnetic_field_in_micro_tesla()->::anx::Vector3::MergeFrom(
        from._internal_magnetic_field_in_micro_tesla());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImuData_Raw::CopyFrom(const ImuData_Raw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anx.ImuData.Raw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImuData_Raw::IsInitialized() const {
  return true;
}

void ImuData_Raw::InternalSwap(ImuData_Raw* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImuData_Raw, _impl_.magnetic_field_in_micro_tesla_)
      + sizeof(ImuData_Raw::_impl_.magnetic_field_in_micro_tesla_)
      - PROTOBUF_FIELD_OFFSET(ImuData_Raw, _impl_.acceleration_)>(
          reinterpret_cast<char*>(&_impl_.acceleration_),
          reinterpret_cast<char*>(&other->_impl_.acceleration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImuData_Raw::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_assets_2eproto_getter, &descriptor_table_assets_2eproto_once,
      file_level_metadata_assets_2eproto[8]);
}
// ===================================================================

class ImuData::_Internal {
 public:
  static const ::anx::ImuData_Filtered& filtered(const ImuData* msg);
  static const ::anx::ImuData_Raw& raw(const ImuData* msg);
};

const ::anx::ImuData_Filtered&
ImuData::_Internal::filtered(const ImuData* msg) {
  return *msg->_impl_.filtered_;
}
const ::anx::ImuData_Raw&
ImuData::_Internal::raw(const ImuData* msg) {
  return *msg->_impl_.raw_;
}
ImuData::ImuData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anx.ImuData)
}
ImuData::ImuData(const ImuData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImuData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filtered_){nullptr}
    , decltype(_impl_.raw_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_filtered()) {
    _this->_impl_.filtered_ = new ::anx::ImuData_Filtered(*from._impl_.filtered_);
  }
  if (from._internal_has_raw()) {
    _this->_impl_.raw_ = new ::anx::ImuData_Raw(*from._impl_.raw_);
  }
  // @@protoc_insertion_point(copy_constructor:anx.ImuData)
}

inline void ImuData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.filtered_){nullptr}
    , decltype(_impl_.raw_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ImuData::~ImuData() {
  // @@protoc_insertion_point(destructor:anx.ImuData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImuData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.filtered_;
  if (this != internal_default_instance()) delete _impl_.raw_;
}

void ImuData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImuData::Clear() {
// @@protoc_insertion_point(message_clear_start:anx.ImuData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.filtered_ != nullptr) {
    delete _impl_.filtered_;
  }
  _impl_.filtered_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.raw_ != nullptr) {
    delete _impl_.raw_;
  }
  _impl_.raw_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImuData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .anx.ImuData.Filtered filtered = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_filtered(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .anx.ImuData.Raw raw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_raw(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ImuData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anx.ImuData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .anx.ImuData.Filtered filtered = 1;
  if (this->_internal_has_filtered()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::filtered(this),
        _Internal::filtered(this).GetCachedSize(), target, stream);
  }

  // .anx.ImuData.Raw raw = 2;
  if (this->_internal_has_raw()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::raw(this),
        _Internal::raw(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anx.ImuData)
  return target;
}

::size_t ImuData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anx.ImuData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .anx.ImuData.Filtered filtered = 1;
  if (this->_internal_has_filtered()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.filtered_);
  }

  // .anx.ImuData.Raw raw = 2;
  if (this->_internal_has_raw()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.raw_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImuData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImuData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImuData::GetClassData() const { return &_class_data_; }


void ImuData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImuData*>(&to_msg);
  auto& from = static_cast<const ImuData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anx.ImuData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_filtered()) {
    _this->_internal_mutable_filtered()->::anx::ImuData_Filtered::MergeFrom(
        from._internal_filtered());
  }
  if (from._internal_has_raw()) {
    _this->_internal_mutable_raw()->::anx::ImuData_Raw::MergeFrom(
        from._internal_raw());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImuData::CopyFrom(const ImuData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anx.ImuData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImuData::IsInitialized() const {
  return true;
}

void ImuData::InternalSwap(ImuData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImuData, _impl_.raw_)
      + sizeof(ImuData::_impl_.raw_)
      - PROTOBUF_FIELD_OFFSET(ImuData, _impl_.filtered_)>(
          reinterpret_cast<char*>(&_impl_.filtered_),
          reinterpret_cast<char*>(&other->_impl_.filtered_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImuData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_assets_2eproto_getter, &descriptor_table_assets_2eproto_once,
      file_level_metadata_assets_2eproto[9]);
}
// ===================================================================

class GnssData::_Internal {
 public:
};

GnssData::GnssData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anx.GnssData)
}
GnssData::GnssData(const GnssData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GnssData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nmea_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.nmea_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.nmea_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nmea().empty()) {
    _this->_impl_.nmea_.Set(from._internal_nmea(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:anx.GnssData)
}

inline void GnssData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.nmea_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.nmea_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.nmea_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GnssData::~GnssData() {
  // @@protoc_insertion_point(destructor:anx.GnssData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GnssData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nmea_.Destroy();
}

void GnssData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GnssData::Clear() {
// @@protoc_insertion_point(message_clear_start:anx.GnssData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nmea_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GnssData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string nmea = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_nmea();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "anx.GnssData.nmea"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GnssData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anx.GnssData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string nmea = 1;
  if (!this->_internal_nmea().empty()) {
    const std::string& _s = this->_internal_nmea();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "anx.GnssData.nmea");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anx.GnssData)
  return target;
}

::size_t GnssData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anx.GnssData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nmea = 1;
  if (!this->_internal_nmea().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_nmea());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GnssData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GnssData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GnssData::GetClassData() const { return &_class_data_; }


void GnssData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GnssData*>(&to_msg);
  auto& from = static_cast<const GnssData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anx.GnssData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nmea().empty()) {
    _this->_internal_set_nmea(from._internal_nmea());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GnssData::CopyFrom(const GnssData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anx.GnssData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GnssData::IsInitialized() const {
  return true;
}

void GnssData::InternalSwap(GnssData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.nmea_, lhs_arena,
                                       &other->_impl_.nmea_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata GnssData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_assets_2eproto_getter, &descriptor_table_assets_2eproto_once,
      file_level_metadata_assets_2eproto[10]);
}
// ===================================================================

class CameraData::_Internal {
 public:
};

CameraData::CameraData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anx.CameraData)
}
CameraData::CameraData(const CameraData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CameraData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.image_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.image_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_image().empty()) {
    _this->_impl_.image_.Set(from._internal_image(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:anx.CameraData)
}

inline void CameraData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.image_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.image_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CameraData::~CameraData() {
  // @@protoc_insertion_point(destructor:anx.CameraData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CameraData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.image_.Destroy();
}

void CameraData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CameraData::Clear() {
// @@protoc_insertion_point(message_clear_start:anx.CameraData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.image_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_image();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CameraData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anx.CameraData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes image = 1;
  if (!this->_internal_image().empty()) {
    const std::string& _s = this->_internal_image();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anx.CameraData)
  return target;
}

::size_t CameraData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anx.CameraData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes image = 1;
  if (!this->_internal_image().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_image());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CameraData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CameraData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CameraData::GetClassData() const { return &_class_data_; }


void CameraData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CameraData*>(&to_msg);
  auto& from = static_cast<const CameraData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anx.CameraData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_image().empty()) {
    _this->_internal_set_image(from._internal_image());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CameraData::CopyFrom(const CameraData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anx.CameraData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraData::IsInitialized() const {
  return true;
}

void CameraData::InternalSwap(CameraData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.image_, lhs_arena,
                                       &other->_impl_.image_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_assets_2eproto_getter, &descriptor_table_assets_2eproto_once,
      file_level_metadata_assets_2eproto[11]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace anx
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::anx::AssetState*
Arena::CreateMaybeMessage< ::anx::AssetState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::anx::AssetState >(arena);
}
template<> PROTOBUF_NOINLINE ::anx::DeviceImuSelect*
Arena::CreateMaybeMessage< ::anx::DeviceImuSelect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::anx::DeviceImuSelect >(arena);
}
template<> PROTOBUF_NOINLINE ::anx::DeviceGnssSelect*
Arena::CreateMaybeMessage< ::anx::DeviceGnssSelect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::anx::DeviceGnssSelect >(arena);
}
template<> PROTOBUF_NOINLINE ::anx::DeviceCameraSelect*
Arena::CreateMaybeMessage< ::anx::DeviceCameraSelect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::anx::DeviceCameraSelect >(arena);
}
template<> PROTOBUF_NOINLINE ::anx::DeviceCameraStream*
Arena::CreateMaybeMessage< ::anx::DeviceCameraStream >(Arena* arena) {
  return Arena::CreateMessageInternal< ::anx::DeviceCameraStream >(arena);
}
template<> PROTOBUF_NOINLINE ::anx::StartDeviceImu*
Arena::CreateMaybeMessage< ::anx::StartDeviceImu >(Arena* arena) {
  return Arena::CreateMessageInternal< ::anx::StartDeviceImu >(arena);
}
template<> PROTOBUF_NOINLINE ::anx::StartDeviceCamera*
Arena::CreateMaybeMessage< ::anx::StartDeviceCamera >(Arena* arena) {
  return Arena::CreateMessageInternal< ::anx::StartDeviceCamera >(arena);
}
template<> PROTOBUF_NOINLINE ::anx::ImuData_Filtered*
Arena::CreateMaybeMessage< ::anx::ImuData_Filtered >(Arena* arena) {
  return Arena::CreateMessageInternal< ::anx::ImuData_Filtered >(arena);
}
template<> PROTOBUF_NOINLINE ::anx::ImuData_Raw*
Arena::CreateMaybeMessage< ::anx::ImuData_Raw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::anx::ImuData_Raw >(arena);
}
template<> PROTOBUF_NOINLINE ::anx::ImuData*
Arena::CreateMaybeMessage< ::anx::ImuData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::anx::ImuData >(arena);
}
template<> PROTOBUF_NOINLINE ::anx::GnssData*
Arena::CreateMaybeMessage< ::anx::GnssData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::anx::GnssData >(arena);
}
template<> PROTOBUF_NOINLINE ::anx::CameraData*
Arena::CreateMaybeMessage< ::anx::CameraData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::anx::CameraData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

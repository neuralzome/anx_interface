// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: assets.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_assets_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_assets_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4022000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4022000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "common.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_assets_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_assets_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_assets_2eproto;
namespace anx {
class AssetState;
struct AssetStateDefaultTypeInternal;
extern AssetStateDefaultTypeInternal _AssetState_default_instance_;
class CameraData;
struct CameraDataDefaultTypeInternal;
extern CameraDataDefaultTypeInternal _CameraData_default_instance_;
class DeviceCameraSelect;
struct DeviceCameraSelectDefaultTypeInternal;
extern DeviceCameraSelectDefaultTypeInternal _DeviceCameraSelect_default_instance_;
class DeviceCameraStream;
struct DeviceCameraStreamDefaultTypeInternal;
extern DeviceCameraStreamDefaultTypeInternal _DeviceCameraStream_default_instance_;
class DeviceGnssSelect;
struct DeviceGnssSelectDefaultTypeInternal;
extern DeviceGnssSelectDefaultTypeInternal _DeviceGnssSelect_default_instance_;
class DeviceImuSelect;
struct DeviceImuSelectDefaultTypeInternal;
extern DeviceImuSelectDefaultTypeInternal _DeviceImuSelect_default_instance_;
class GnssData;
struct GnssDataDefaultTypeInternal;
extern GnssDataDefaultTypeInternal _GnssData_default_instance_;
class ImuData;
struct ImuDataDefaultTypeInternal;
extern ImuDataDefaultTypeInternal _ImuData_default_instance_;
class ImuData_Filtered;
struct ImuData_FilteredDefaultTypeInternal;
extern ImuData_FilteredDefaultTypeInternal _ImuData_Filtered_default_instance_;
class ImuData_Raw;
struct ImuData_RawDefaultTypeInternal;
extern ImuData_RawDefaultTypeInternal _ImuData_Raw_default_instance_;
class StartDeviceCamera;
struct StartDeviceCameraDefaultTypeInternal;
extern StartDeviceCameraDefaultTypeInternal _StartDeviceCamera_default_instance_;
class StartDeviceImu;
struct StartDeviceImuDefaultTypeInternal;
extern StartDeviceImuDefaultTypeInternal _StartDeviceImu_default_instance_;
}  // namespace anx
PROTOBUF_NAMESPACE_OPEN
template <>
::anx::AssetState* Arena::CreateMaybeMessage<::anx::AssetState>(Arena*);
template <>
::anx::CameraData* Arena::CreateMaybeMessage<::anx::CameraData>(Arena*);
template <>
::anx::DeviceCameraSelect* Arena::CreateMaybeMessage<::anx::DeviceCameraSelect>(Arena*);
template <>
::anx::DeviceCameraStream* Arena::CreateMaybeMessage<::anx::DeviceCameraStream>(Arena*);
template <>
::anx::DeviceGnssSelect* Arena::CreateMaybeMessage<::anx::DeviceGnssSelect>(Arena*);
template <>
::anx::DeviceImuSelect* Arena::CreateMaybeMessage<::anx::DeviceImuSelect>(Arena*);
template <>
::anx::GnssData* Arena::CreateMaybeMessage<::anx::GnssData>(Arena*);
template <>
::anx::ImuData* Arena::CreateMaybeMessage<::anx::ImuData>(Arena*);
template <>
::anx::ImuData_Filtered* Arena::CreateMaybeMessage<::anx::ImuData_Filtered>(Arena*);
template <>
::anx::ImuData_Raw* Arena::CreateMaybeMessage<::anx::ImuData_Raw>(Arena*);
template <>
::anx::StartDeviceCamera* Arena::CreateMaybeMessage<::anx::StartDeviceCamera>(Arena*);
template <>
::anx::StartDeviceImu* Arena::CreateMaybeMessage<::anx::StartDeviceImu>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace anx {
enum DeviceCameraStream_PixelFormat : int {
  DeviceCameraStream_PixelFormat_MJPEG = 0,
  DeviceCameraStream_PixelFormat_YUV420 = 1,
  DeviceCameraStream_PixelFormat_DeviceCameraStream_PixelFormat_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  DeviceCameraStream_PixelFormat_DeviceCameraStream_PixelFormat_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool DeviceCameraStream_PixelFormat_IsValid(int value);
constexpr DeviceCameraStream_PixelFormat DeviceCameraStream_PixelFormat_PixelFormat_MIN = static_cast<DeviceCameraStream_PixelFormat>(0);
constexpr DeviceCameraStream_PixelFormat DeviceCameraStream_PixelFormat_PixelFormat_MAX = static_cast<DeviceCameraStream_PixelFormat>(1);
constexpr int DeviceCameraStream_PixelFormat_PixelFormat_ARRAYSIZE = 1 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
DeviceCameraStream_PixelFormat_descriptor();
template <typename T>
const std::string& DeviceCameraStream_PixelFormat_Name(T value) {
  static_assert(std::is_same<T, DeviceCameraStream_PixelFormat>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PixelFormat_Name().");
  return DeviceCameraStream_PixelFormat_Name(static_cast<DeviceCameraStream_PixelFormat>(value));
}
template <>
inline const std::string& DeviceCameraStream_PixelFormat_Name(DeviceCameraStream_PixelFormat value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<DeviceCameraStream_PixelFormat_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool DeviceCameraStream_PixelFormat_Parse(absl::string_view name, DeviceCameraStream_PixelFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DeviceCameraStream_PixelFormat>(
      DeviceCameraStream_PixelFormat_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class AssetState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:anx.AssetState) */ {
 public:
  inline AssetState() : AssetState(nullptr) {}
  ~AssetState() override;
  explicit PROTOBUF_CONSTEXPR AssetState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AssetState(const AssetState& from);
  AssetState(AssetState&& from) noexcept
    : AssetState() {
    *this = ::std::move(from);
  }

  inline AssetState& operator=(const AssetState& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetState& operator=(AssetState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssetState& default_instance() {
    return *internal_default_instance();
  }
  static inline const AssetState* internal_default_instance() {
    return reinterpret_cast<const AssetState*>(
               &_AssetState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AssetState& a, AssetState& b) {
    a.Swap(&b);
  }
  inline void Swap(AssetState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssetState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AssetState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AssetState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AssetState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AssetState& from) {
    AssetState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssetState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "anx.AssetState";
  }
  protected:
  explicit AssetState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImuFieldNumber = 1,
    kGnssFieldNumber = 2,
    kCameraFieldNumber = 3,
  };
  // .anx.DeviceImuSelect imu = 1;
  bool has_imu() const;
  private:
  bool _internal_has_imu() const;

  public:
  void clear_imu() ;
  const ::anx::DeviceImuSelect& imu() const;
  PROTOBUF_NODISCARD ::anx::DeviceImuSelect* release_imu();
  ::anx::DeviceImuSelect* mutable_imu();
  void set_allocated_imu(::anx::DeviceImuSelect* imu);
  private:
  const ::anx::DeviceImuSelect& _internal_imu() const;
  ::anx::DeviceImuSelect* _internal_mutable_imu();
  public:
  void unsafe_arena_set_allocated_imu(
      ::anx::DeviceImuSelect* imu);
  ::anx::DeviceImuSelect* unsafe_arena_release_imu();
  // .anx.DeviceGnssSelect gnss = 2;
  bool has_gnss() const;
  private:
  bool _internal_has_gnss() const;

  public:
  void clear_gnss() ;
  const ::anx::DeviceGnssSelect& gnss() const;
  PROTOBUF_NODISCARD ::anx::DeviceGnssSelect* release_gnss();
  ::anx::DeviceGnssSelect* mutable_gnss();
  void set_allocated_gnss(::anx::DeviceGnssSelect* gnss);
  private:
  const ::anx::DeviceGnssSelect& _internal_gnss() const;
  ::anx::DeviceGnssSelect* _internal_mutable_gnss();
  public:
  void unsafe_arena_set_allocated_gnss(
      ::anx::DeviceGnssSelect* gnss);
  ::anx::DeviceGnssSelect* unsafe_arena_release_gnss();
  // .anx.DeviceCameraSelect camera = 3;
  bool has_camera() const;
  private:
  bool _internal_has_camera() const;

  public:
  void clear_camera() ;
  const ::anx::DeviceCameraSelect& camera() const;
  PROTOBUF_NODISCARD ::anx::DeviceCameraSelect* release_camera();
  ::anx::DeviceCameraSelect* mutable_camera();
  void set_allocated_camera(::anx::DeviceCameraSelect* camera);
  private:
  const ::anx::DeviceCameraSelect& _internal_camera() const;
  ::anx::DeviceCameraSelect* _internal_mutable_camera();
  public:
  void unsafe_arena_set_allocated_camera(
      ::anx::DeviceCameraSelect* camera);
  ::anx::DeviceCameraSelect* unsafe_arena_release_camera();
  // @@protoc_insertion_point(class_scope:anx.AssetState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::anx::DeviceImuSelect* imu_;
    ::anx::DeviceGnssSelect* gnss_;
    ::anx::DeviceCameraSelect* camera_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_assets_2eproto;
};// -------------------------------------------------------------------

class DeviceImuSelect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:anx.DeviceImuSelect) */ {
 public:
  inline DeviceImuSelect() : DeviceImuSelect(nullptr) {}
  ~DeviceImuSelect() override;
  explicit PROTOBUF_CONSTEXPR DeviceImuSelect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceImuSelect(const DeviceImuSelect& from);
  DeviceImuSelect(DeviceImuSelect&& from) noexcept
    : DeviceImuSelect() {
    *this = ::std::move(from);
  }

  inline DeviceImuSelect& operator=(const DeviceImuSelect& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceImuSelect& operator=(DeviceImuSelect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceImuSelect& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceImuSelect* internal_default_instance() {
    return reinterpret_cast<const DeviceImuSelect*>(
               &_DeviceImuSelect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DeviceImuSelect& a, DeviceImuSelect& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceImuSelect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceImuSelect* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceImuSelect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceImuSelect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceImuSelect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeviceImuSelect& from) {
    DeviceImuSelect::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceImuSelect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "anx.DeviceImuSelect";
  }
  protected:
  explicit DeviceImuSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFpsFieldNumber = 1,
  };
  // repeated uint32 fps = 1;
  int fps_size() const;
  private:
  int _internal_fps_size() const;

  public:
  void clear_fps() ;
  ::uint32_t fps(int index) const;
  void set_fps(int index, ::uint32_t value);
  void add_fps(::uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& fps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* mutable_fps();

  private:
  ::uint32_t _internal_fps(int index) const;
  void _internal_add_fps(::uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& _internal_fps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* _internal_mutable_fps();

  public:
  // @@protoc_insertion_point(class_scope:anx.DeviceImuSelect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t> fps_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _fps_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_assets_2eproto;
};// -------------------------------------------------------------------

class DeviceGnssSelect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:anx.DeviceGnssSelect) */ {
 public:
  inline DeviceGnssSelect() : DeviceGnssSelect(nullptr) {}
  ~DeviceGnssSelect() override;
  explicit PROTOBUF_CONSTEXPR DeviceGnssSelect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceGnssSelect(const DeviceGnssSelect& from);
  DeviceGnssSelect(DeviceGnssSelect&& from) noexcept
    : DeviceGnssSelect() {
    *this = ::std::move(from);
  }

  inline DeviceGnssSelect& operator=(const DeviceGnssSelect& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceGnssSelect& operator=(DeviceGnssSelect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceGnssSelect& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceGnssSelect* internal_default_instance() {
    return reinterpret_cast<const DeviceGnssSelect*>(
               &_DeviceGnssSelect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DeviceGnssSelect& a, DeviceGnssSelect& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceGnssSelect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceGnssSelect* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceGnssSelect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceGnssSelect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceGnssSelect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeviceGnssSelect& from) {
    DeviceGnssSelect::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceGnssSelect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "anx.DeviceGnssSelect";
  }
  protected:
  explicit DeviceGnssSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvailableFieldNumber = 1,
  };
  // bool available = 1;
  void clear_available() ;
  bool available() const;
  void set_available(bool value);

  private:
  bool _internal_available() const;
  void _internal_set_available(bool value);

  public:
  // @@protoc_insertion_point(class_scope:anx.DeviceGnssSelect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool available_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_assets_2eproto;
};// -------------------------------------------------------------------

class DeviceCameraSelect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:anx.DeviceCameraSelect) */ {
 public:
  inline DeviceCameraSelect() : DeviceCameraSelect(nullptr) {}
  ~DeviceCameraSelect() override;
  explicit PROTOBUF_CONSTEXPR DeviceCameraSelect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceCameraSelect(const DeviceCameraSelect& from);
  DeviceCameraSelect(DeviceCameraSelect&& from) noexcept
    : DeviceCameraSelect() {
    *this = ::std::move(from);
  }

  inline DeviceCameraSelect& operator=(const DeviceCameraSelect& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceCameraSelect& operator=(DeviceCameraSelect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceCameraSelect& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceCameraSelect* internal_default_instance() {
    return reinterpret_cast<const DeviceCameraSelect*>(
               &_DeviceCameraSelect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DeviceCameraSelect& a, DeviceCameraSelect& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceCameraSelect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceCameraSelect* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceCameraSelect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceCameraSelect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceCameraSelect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeviceCameraSelect& from) {
    DeviceCameraSelect::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceCameraSelect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "anx.DeviceCameraSelect";
  }
  protected:
  explicit DeviceCameraSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraStreamsFieldNumber = 1,
  };
  // repeated .anx.DeviceCameraStream camera_streams = 1;
  int camera_streams_size() const;
  private:
  int _internal_camera_streams_size() const;

  public:
  void clear_camera_streams() ;
  ::anx::DeviceCameraStream* mutable_camera_streams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::anx::DeviceCameraStream >*
      mutable_camera_streams();
  private:
  const ::anx::DeviceCameraStream& _internal_camera_streams(int index) const;
  ::anx::DeviceCameraStream* _internal_add_camera_streams();
  public:
  const ::anx::DeviceCameraStream& camera_streams(int index) const;
  ::anx::DeviceCameraStream* add_camera_streams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::anx::DeviceCameraStream >&
      camera_streams() const;
  // @@protoc_insertion_point(class_scope:anx.DeviceCameraSelect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::anx::DeviceCameraStream > camera_streams_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_assets_2eproto;
};// -------------------------------------------------------------------

class DeviceCameraStream final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:anx.DeviceCameraStream) */ {
 public:
  inline DeviceCameraStream() : DeviceCameraStream(nullptr) {}
  ~DeviceCameraStream() override;
  explicit PROTOBUF_CONSTEXPR DeviceCameraStream(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceCameraStream(const DeviceCameraStream& from);
  DeviceCameraStream(DeviceCameraStream&& from) noexcept
    : DeviceCameraStream() {
    *this = ::std::move(from);
  }

  inline DeviceCameraStream& operator=(const DeviceCameraStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceCameraStream& operator=(DeviceCameraStream&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceCameraStream& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceCameraStream* internal_default_instance() {
    return reinterpret_cast<const DeviceCameraStream*>(
               &_DeviceCameraStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DeviceCameraStream& a, DeviceCameraStream& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceCameraStream* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceCameraStream* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceCameraStream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceCameraStream>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceCameraStream& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeviceCameraStream& from) {
    DeviceCameraStream::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceCameraStream* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "anx.DeviceCameraStream";
  }
  protected:
  explicit DeviceCameraStream(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using PixelFormat = DeviceCameraStream_PixelFormat;
  static constexpr PixelFormat MJPEG = DeviceCameraStream_PixelFormat_MJPEG;
  static constexpr PixelFormat YUV420 = DeviceCameraStream_PixelFormat_YUV420;
  static inline bool PixelFormat_IsValid(int value) {
    return DeviceCameraStream_PixelFormat_IsValid(value);
  }
  static constexpr PixelFormat PixelFormat_MIN = DeviceCameraStream_PixelFormat_PixelFormat_MIN;
  static constexpr PixelFormat PixelFormat_MAX = DeviceCameraStream_PixelFormat_PixelFormat_MAX;
  static constexpr int PixelFormat_ARRAYSIZE = DeviceCameraStream_PixelFormat_PixelFormat_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PixelFormat_descriptor() {
    return DeviceCameraStream_PixelFormat_descriptor();
  }
  template <typename T>
  static inline const std::string& PixelFormat_Name(T value) {
    return DeviceCameraStream_PixelFormat_Name(value);
  }
  static inline bool PixelFormat_Parse(absl::string_view name, PixelFormat* value) {
    return DeviceCameraStream_PixelFormat_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFpsFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
    kPixelFormatFieldNumber = 4,
  };
  // uint32 fps = 1;
  void clear_fps() ;
  ::uint32_t fps() const;
  void set_fps(::uint32_t value);

  private:
  ::uint32_t _internal_fps() const;
  void _internal_set_fps(::uint32_t value);

  public:
  // uint32 width = 2;
  void clear_width() ;
  ::uint32_t width() const;
  void set_width(::uint32_t value);

  private:
  ::uint32_t _internal_width() const;
  void _internal_set_width(::uint32_t value);

  public:
  // uint32 height = 3;
  void clear_height() ;
  ::uint32_t height() const;
  void set_height(::uint32_t value);

  private:
  ::uint32_t _internal_height() const;
  void _internal_set_height(::uint32_t value);

  public:
  // .anx.DeviceCameraStream.PixelFormat pixel_format = 4;
  void clear_pixel_format() ;
  ::anx::DeviceCameraStream_PixelFormat pixel_format() const;
  void set_pixel_format(::anx::DeviceCameraStream_PixelFormat value);

  private:
  ::anx::DeviceCameraStream_PixelFormat _internal_pixel_format() const;
  void _internal_set_pixel_format(::anx::DeviceCameraStream_PixelFormat value);

  public:
  // @@protoc_insertion_point(class_scope:anx.DeviceCameraStream)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint32_t fps_;
    ::uint32_t width_;
    ::uint32_t height_;
    int pixel_format_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_assets_2eproto;
};// -------------------------------------------------------------------

class StartDeviceImu final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:anx.StartDeviceImu) */ {
 public:
  inline StartDeviceImu() : StartDeviceImu(nullptr) {}
  ~StartDeviceImu() override;
  explicit PROTOBUF_CONSTEXPR StartDeviceImu(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartDeviceImu(const StartDeviceImu& from);
  StartDeviceImu(StartDeviceImu&& from) noexcept
    : StartDeviceImu() {
    *this = ::std::move(from);
  }

  inline StartDeviceImu& operator=(const StartDeviceImu& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartDeviceImu& operator=(StartDeviceImu&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartDeviceImu& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartDeviceImu* internal_default_instance() {
    return reinterpret_cast<const StartDeviceImu*>(
               &_StartDeviceImu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StartDeviceImu& a, StartDeviceImu& b) {
    a.Swap(&b);
  }
  inline void Swap(StartDeviceImu* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartDeviceImu* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartDeviceImu* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartDeviceImu>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartDeviceImu& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StartDeviceImu& from) {
    StartDeviceImu::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartDeviceImu* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "anx.StartDeviceImu";
  }
  protected:
  explicit StartDeviceImu(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFpsFieldNumber = 1,
  };
  // uint32 fps = 1;
  void clear_fps() ;
  ::uint32_t fps() const;
  void set_fps(::uint32_t value);

  private:
  ::uint32_t _internal_fps() const;
  void _internal_set_fps(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:anx.StartDeviceImu)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint32_t fps_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_assets_2eproto;
};// -------------------------------------------------------------------

class StartDeviceCamera final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:anx.StartDeviceCamera) */ {
 public:
  inline StartDeviceCamera() : StartDeviceCamera(nullptr) {}
  ~StartDeviceCamera() override;
  explicit PROTOBUF_CONSTEXPR StartDeviceCamera(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartDeviceCamera(const StartDeviceCamera& from);
  StartDeviceCamera(StartDeviceCamera&& from) noexcept
    : StartDeviceCamera() {
    *this = ::std::move(from);
  }

  inline StartDeviceCamera& operator=(const StartDeviceCamera& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartDeviceCamera& operator=(StartDeviceCamera&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartDeviceCamera& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartDeviceCamera* internal_default_instance() {
    return reinterpret_cast<const StartDeviceCamera*>(
               &_StartDeviceCamera_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(StartDeviceCamera& a, StartDeviceCamera& b) {
    a.Swap(&b);
  }
  inline void Swap(StartDeviceCamera* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartDeviceCamera* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartDeviceCamera* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartDeviceCamera>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartDeviceCamera& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StartDeviceCamera& from) {
    StartDeviceCamera::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartDeviceCamera* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "anx.StartDeviceCamera";
  }
  protected:
  explicit StartDeviceCamera(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraStreamFieldNumber = 1,
  };
  // .anx.DeviceCameraStream camera_stream = 1;
  bool has_camera_stream() const;
  private:
  bool _internal_has_camera_stream() const;

  public:
  void clear_camera_stream() ;
  const ::anx::DeviceCameraStream& camera_stream() const;
  PROTOBUF_NODISCARD ::anx::DeviceCameraStream* release_camera_stream();
  ::anx::DeviceCameraStream* mutable_camera_stream();
  void set_allocated_camera_stream(::anx::DeviceCameraStream* camera_stream);
  private:
  const ::anx::DeviceCameraStream& _internal_camera_stream() const;
  ::anx::DeviceCameraStream* _internal_mutable_camera_stream();
  public:
  void unsafe_arena_set_allocated_camera_stream(
      ::anx::DeviceCameraStream* camera_stream);
  ::anx::DeviceCameraStream* unsafe_arena_release_camera_stream();
  // @@protoc_insertion_point(class_scope:anx.StartDeviceCamera)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::anx::DeviceCameraStream* camera_stream_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_assets_2eproto;
};// -------------------------------------------------------------------

class ImuData_Filtered final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:anx.ImuData.Filtered) */ {
 public:
  inline ImuData_Filtered() : ImuData_Filtered(nullptr) {}
  ~ImuData_Filtered() override;
  explicit PROTOBUF_CONSTEXPR ImuData_Filtered(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImuData_Filtered(const ImuData_Filtered& from);
  ImuData_Filtered(ImuData_Filtered&& from) noexcept
    : ImuData_Filtered() {
    *this = ::std::move(from);
  }

  inline ImuData_Filtered& operator=(const ImuData_Filtered& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImuData_Filtered& operator=(ImuData_Filtered&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImuData_Filtered& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImuData_Filtered* internal_default_instance() {
    return reinterpret_cast<const ImuData_Filtered*>(
               &_ImuData_Filtered_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ImuData_Filtered& a, ImuData_Filtered& b) {
    a.Swap(&b);
  }
  inline void Swap(ImuData_Filtered* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImuData_Filtered* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImuData_Filtered* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImuData_Filtered>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImuData_Filtered& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ImuData_Filtered& from) {
    ImuData_Filtered::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImuData_Filtered* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "anx.ImuData.Filtered";
  }
  protected:
  explicit ImuData_Filtered(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccelerationFieldNumber = 1,
    kAngularVelocityFieldNumber = 2,
    kOrientationFieldNumber = 3,
  };
  // .anx.Vector3 acceleration = 1;
  bool has_acceleration() const;
  private:
  bool _internal_has_acceleration() const;

  public:
  void clear_acceleration() ;
  const ::anx::Vector3& acceleration() const;
  PROTOBUF_NODISCARD ::anx::Vector3* release_acceleration();
  ::anx::Vector3* mutable_acceleration();
  void set_allocated_acceleration(::anx::Vector3* acceleration);
  private:
  const ::anx::Vector3& _internal_acceleration() const;
  ::anx::Vector3* _internal_mutable_acceleration();
  public:
  void unsafe_arena_set_allocated_acceleration(
      ::anx::Vector3* acceleration);
  ::anx::Vector3* unsafe_arena_release_acceleration();
  // .anx.Vector3 angular_velocity = 2;
  bool has_angular_velocity() const;
  private:
  bool _internal_has_angular_velocity() const;

  public:
  void clear_angular_velocity() ;
  const ::anx::Vector3& angular_velocity() const;
  PROTOBUF_NODISCARD ::anx::Vector3* release_angular_velocity();
  ::anx::Vector3* mutable_angular_velocity();
  void set_allocated_angular_velocity(::anx::Vector3* angular_velocity);
  private:
  const ::anx::Vector3& _internal_angular_velocity() const;
  ::anx::Vector3* _internal_mutable_angular_velocity();
  public:
  void unsafe_arena_set_allocated_angular_velocity(
      ::anx::Vector3* angular_velocity);
  ::anx::Vector3* unsafe_arena_release_angular_velocity();
  // .anx.Quaternion orientation = 3;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;

  public:
  void clear_orientation() ;
  const ::anx::Quaternion& orientation() const;
  PROTOBUF_NODISCARD ::anx::Quaternion* release_orientation();
  ::anx::Quaternion* mutable_orientation();
  void set_allocated_orientation(::anx::Quaternion* orientation);
  private:
  const ::anx::Quaternion& _internal_orientation() const;
  ::anx::Quaternion* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::anx::Quaternion* orientation);
  ::anx::Quaternion* unsafe_arena_release_orientation();
  // @@protoc_insertion_point(class_scope:anx.ImuData.Filtered)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::anx::Vector3* acceleration_;
    ::anx::Vector3* angular_velocity_;
    ::anx::Quaternion* orientation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_assets_2eproto;
};// -------------------------------------------------------------------

class ImuData_Raw final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:anx.ImuData.Raw) */ {
 public:
  inline ImuData_Raw() : ImuData_Raw(nullptr) {}
  ~ImuData_Raw() override;
  explicit PROTOBUF_CONSTEXPR ImuData_Raw(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImuData_Raw(const ImuData_Raw& from);
  ImuData_Raw(ImuData_Raw&& from) noexcept
    : ImuData_Raw() {
    *this = ::std::move(from);
  }

  inline ImuData_Raw& operator=(const ImuData_Raw& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImuData_Raw& operator=(ImuData_Raw&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImuData_Raw& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImuData_Raw* internal_default_instance() {
    return reinterpret_cast<const ImuData_Raw*>(
               &_ImuData_Raw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ImuData_Raw& a, ImuData_Raw& b) {
    a.Swap(&b);
  }
  inline void Swap(ImuData_Raw* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImuData_Raw* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImuData_Raw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImuData_Raw>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImuData_Raw& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ImuData_Raw& from) {
    ImuData_Raw::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImuData_Raw* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "anx.ImuData.Raw";
  }
  protected:
  explicit ImuData_Raw(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccelerationFieldNumber = 1,
    kAngularVelocityFieldNumber = 2,
    kMagneticFieldInMicroTeslaFieldNumber = 3,
  };
  // .anx.Vector3 acceleration = 1;
  bool has_acceleration() const;
  private:
  bool _internal_has_acceleration() const;

  public:
  void clear_acceleration() ;
  const ::anx::Vector3& acceleration() const;
  PROTOBUF_NODISCARD ::anx::Vector3* release_acceleration();
  ::anx::Vector3* mutable_acceleration();
  void set_allocated_acceleration(::anx::Vector3* acceleration);
  private:
  const ::anx::Vector3& _internal_acceleration() const;
  ::anx::Vector3* _internal_mutable_acceleration();
  public:
  void unsafe_arena_set_allocated_acceleration(
      ::anx::Vector3* acceleration);
  ::anx::Vector3* unsafe_arena_release_acceleration();
  // .anx.Vector3 angular_velocity = 2;
  bool has_angular_velocity() const;
  private:
  bool _internal_has_angular_velocity() const;

  public:
  void clear_angular_velocity() ;
  const ::anx::Vector3& angular_velocity() const;
  PROTOBUF_NODISCARD ::anx::Vector3* release_angular_velocity();
  ::anx::Vector3* mutable_angular_velocity();
  void set_allocated_angular_velocity(::anx::Vector3* angular_velocity);
  private:
  const ::anx::Vector3& _internal_angular_velocity() const;
  ::anx::Vector3* _internal_mutable_angular_velocity();
  public:
  void unsafe_arena_set_allocated_angular_velocity(
      ::anx::Vector3* angular_velocity);
  ::anx::Vector3* unsafe_arena_release_angular_velocity();
  // .anx.Vector3 magnetic_field_in_micro_tesla = 3;
  bool has_magnetic_field_in_micro_tesla() const;
  private:
  bool _internal_has_magnetic_field_in_micro_tesla() const;

  public:
  void clear_magnetic_field_in_micro_tesla() ;
  const ::anx::Vector3& magnetic_field_in_micro_tesla() const;
  PROTOBUF_NODISCARD ::anx::Vector3* release_magnetic_field_in_micro_tesla();
  ::anx::Vector3* mutable_magnetic_field_in_micro_tesla();
  void set_allocated_magnetic_field_in_micro_tesla(::anx::Vector3* magnetic_field_in_micro_tesla);
  private:
  const ::anx::Vector3& _internal_magnetic_field_in_micro_tesla() const;
  ::anx::Vector3* _internal_mutable_magnetic_field_in_micro_tesla();
  public:
  void unsafe_arena_set_allocated_magnetic_field_in_micro_tesla(
      ::anx::Vector3* magnetic_field_in_micro_tesla);
  ::anx::Vector3* unsafe_arena_release_magnetic_field_in_micro_tesla();
  // @@protoc_insertion_point(class_scope:anx.ImuData.Raw)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::anx::Vector3* acceleration_;
    ::anx::Vector3* angular_velocity_;
    ::anx::Vector3* magnetic_field_in_micro_tesla_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_assets_2eproto;
};// -------------------------------------------------------------------

class ImuData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:anx.ImuData) */ {
 public:
  inline ImuData() : ImuData(nullptr) {}
  ~ImuData() override;
  explicit PROTOBUF_CONSTEXPR ImuData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImuData(const ImuData& from);
  ImuData(ImuData&& from) noexcept
    : ImuData() {
    *this = ::std::move(from);
  }

  inline ImuData& operator=(const ImuData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImuData& operator=(ImuData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImuData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImuData* internal_default_instance() {
    return reinterpret_cast<const ImuData*>(
               &_ImuData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ImuData& a, ImuData& b) {
    a.Swap(&b);
  }
  inline void Swap(ImuData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImuData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImuData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImuData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImuData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ImuData& from) {
    ImuData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImuData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "anx.ImuData";
  }
  protected:
  explicit ImuData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ImuData_Filtered Filtered;
  typedef ImuData_Raw Raw;

  // accessors -------------------------------------------------------

  enum : int {
    kFilteredFieldNumber = 1,
    kRawFieldNumber = 2,
  };
  // .anx.ImuData.Filtered filtered = 1;
  bool has_filtered() const;
  private:
  bool _internal_has_filtered() const;

  public:
  void clear_filtered() ;
  const ::anx::ImuData_Filtered& filtered() const;
  PROTOBUF_NODISCARD ::anx::ImuData_Filtered* release_filtered();
  ::anx::ImuData_Filtered* mutable_filtered();
  void set_allocated_filtered(::anx::ImuData_Filtered* filtered);
  private:
  const ::anx::ImuData_Filtered& _internal_filtered() const;
  ::anx::ImuData_Filtered* _internal_mutable_filtered();
  public:
  void unsafe_arena_set_allocated_filtered(
      ::anx::ImuData_Filtered* filtered);
  ::anx::ImuData_Filtered* unsafe_arena_release_filtered();
  // .anx.ImuData.Raw raw = 2;
  bool has_raw() const;
  private:
  bool _internal_has_raw() const;

  public:
  void clear_raw() ;
  const ::anx::ImuData_Raw& raw() const;
  PROTOBUF_NODISCARD ::anx::ImuData_Raw* release_raw();
  ::anx::ImuData_Raw* mutable_raw();
  void set_allocated_raw(::anx::ImuData_Raw* raw);
  private:
  const ::anx::ImuData_Raw& _internal_raw() const;
  ::anx::ImuData_Raw* _internal_mutable_raw();
  public:
  void unsafe_arena_set_allocated_raw(
      ::anx::ImuData_Raw* raw);
  ::anx::ImuData_Raw* unsafe_arena_release_raw();
  // @@protoc_insertion_point(class_scope:anx.ImuData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::anx::ImuData_Filtered* filtered_;
    ::anx::ImuData_Raw* raw_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_assets_2eproto;
};// -------------------------------------------------------------------

class GnssData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:anx.GnssData) */ {
 public:
  inline GnssData() : GnssData(nullptr) {}
  ~GnssData() override;
  explicit PROTOBUF_CONSTEXPR GnssData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GnssData(const GnssData& from);
  GnssData(GnssData&& from) noexcept
    : GnssData() {
    *this = ::std::move(from);
  }

  inline GnssData& operator=(const GnssData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GnssData& operator=(GnssData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GnssData& default_instance() {
    return *internal_default_instance();
  }
  static inline const GnssData* internal_default_instance() {
    return reinterpret_cast<const GnssData*>(
               &_GnssData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GnssData& a, GnssData& b) {
    a.Swap(&b);
  }
  inline void Swap(GnssData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GnssData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GnssData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GnssData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GnssData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GnssData& from) {
    GnssData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GnssData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "anx.GnssData";
  }
  protected:
  explicit GnssData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNmeaFieldNumber = 1,
  };
  // string nmea = 1;
  void clear_nmea() ;
  const std::string& nmea() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nmea(Arg_&& arg, Args_... args);
  std::string* mutable_nmea();
  PROTOBUF_NODISCARD std::string* release_nmea();
  void set_allocated_nmea(std::string* ptr);

  private:
  const std::string& _internal_nmea() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nmea(
      const std::string& value);
  std::string* _internal_mutable_nmea();

  public:
  // @@protoc_insertion_point(class_scope:anx.GnssData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nmea_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_assets_2eproto;
};// -------------------------------------------------------------------

class CameraData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:anx.CameraData) */ {
 public:
  inline CameraData() : CameraData(nullptr) {}
  ~CameraData() override;
  explicit PROTOBUF_CONSTEXPR CameraData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CameraData(const CameraData& from);
  CameraData(CameraData&& from) noexcept
    : CameraData() {
    *this = ::std::move(from);
  }

  inline CameraData& operator=(const CameraData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraData& operator=(CameraData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CameraData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraData* internal_default_instance() {
    return reinterpret_cast<const CameraData*>(
               &_CameraData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CameraData& a, CameraData& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CameraData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CameraData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CameraData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CameraData& from) {
    CameraData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "anx.CameraData";
  }
  protected:
  explicit CameraData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 1,
  };
  // bytes image = 1;
  void clear_image() ;
  const std::string& image() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_image(Arg_&& arg, Args_... args);
  std::string* mutable_image();
  PROTOBUF_NODISCARD std::string* release_image();
  void set_allocated_image(std::string* ptr);

  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(
      const std::string& value);
  std::string* _internal_mutable_image();

  public:
  // @@protoc_insertion_point(class_scope:anx.CameraData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_assets_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AssetState

// .anx.DeviceImuSelect imu = 1;
inline bool AssetState::_internal_has_imu() const {
  return this != internal_default_instance() && _impl_.imu_ != nullptr;
}
inline bool AssetState::has_imu() const {
  return _internal_has_imu();
}
inline void AssetState::clear_imu() {
  if (GetArenaForAllocation() == nullptr && _impl_.imu_ != nullptr) {
    delete _impl_.imu_;
  }
  _impl_.imu_ = nullptr;
}
inline const ::anx::DeviceImuSelect& AssetState::_internal_imu() const {
  const ::anx::DeviceImuSelect* p = _impl_.imu_;
  return p != nullptr ? *p : reinterpret_cast<const ::anx::DeviceImuSelect&>(
      ::anx::_DeviceImuSelect_default_instance_);
}
inline const ::anx::DeviceImuSelect& AssetState::imu() const {
  // @@protoc_insertion_point(field_get:anx.AssetState.imu)
  return _internal_imu();
}
inline void AssetState::unsafe_arena_set_allocated_imu(
    ::anx::DeviceImuSelect* imu) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.imu_);
  }
  _impl_.imu_ = imu;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anx.AssetState.imu)
}
inline ::anx::DeviceImuSelect* AssetState::release_imu() {
  
  ::anx::DeviceImuSelect* temp = _impl_.imu_;
  _impl_.imu_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::anx::DeviceImuSelect* AssetState::unsafe_arena_release_imu() {
  // @@protoc_insertion_point(field_release:anx.AssetState.imu)
  
  ::anx::DeviceImuSelect* temp = _impl_.imu_;
  _impl_.imu_ = nullptr;
  return temp;
}
inline ::anx::DeviceImuSelect* AssetState::_internal_mutable_imu() {
  
  if (_impl_.imu_ == nullptr) {
    auto* p = CreateMaybeMessage<::anx::DeviceImuSelect>(GetArenaForAllocation());
    _impl_.imu_ = p;
  }
  return _impl_.imu_;
}
inline ::anx::DeviceImuSelect* AssetState::mutable_imu() {
  ::anx::DeviceImuSelect* _msg = _internal_mutable_imu();
  // @@protoc_insertion_point(field_mutable:anx.AssetState.imu)
  return _msg;
}
inline void AssetState::set_allocated_imu(::anx::DeviceImuSelect* imu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.imu_;
  }
  if (imu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(imu);
    if (message_arena != submessage_arena) {
      imu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imu, submessage_arena);
    }

  } else {

  }
  _impl_.imu_ = imu;
  // @@protoc_insertion_point(field_set_allocated:anx.AssetState.imu)
}

// .anx.DeviceGnssSelect gnss = 2;
inline bool AssetState::_internal_has_gnss() const {
  return this != internal_default_instance() && _impl_.gnss_ != nullptr;
}
inline bool AssetState::has_gnss() const {
  return _internal_has_gnss();
}
inline void AssetState::clear_gnss() {
  if (GetArenaForAllocation() == nullptr && _impl_.gnss_ != nullptr) {
    delete _impl_.gnss_;
  }
  _impl_.gnss_ = nullptr;
}
inline const ::anx::DeviceGnssSelect& AssetState::_internal_gnss() const {
  const ::anx::DeviceGnssSelect* p = _impl_.gnss_;
  return p != nullptr ? *p : reinterpret_cast<const ::anx::DeviceGnssSelect&>(
      ::anx::_DeviceGnssSelect_default_instance_);
}
inline const ::anx::DeviceGnssSelect& AssetState::gnss() const {
  // @@protoc_insertion_point(field_get:anx.AssetState.gnss)
  return _internal_gnss();
}
inline void AssetState::unsafe_arena_set_allocated_gnss(
    ::anx::DeviceGnssSelect* gnss) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gnss_);
  }
  _impl_.gnss_ = gnss;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anx.AssetState.gnss)
}
inline ::anx::DeviceGnssSelect* AssetState::release_gnss() {
  
  ::anx::DeviceGnssSelect* temp = _impl_.gnss_;
  _impl_.gnss_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::anx::DeviceGnssSelect* AssetState::unsafe_arena_release_gnss() {
  // @@protoc_insertion_point(field_release:anx.AssetState.gnss)
  
  ::anx::DeviceGnssSelect* temp = _impl_.gnss_;
  _impl_.gnss_ = nullptr;
  return temp;
}
inline ::anx::DeviceGnssSelect* AssetState::_internal_mutable_gnss() {
  
  if (_impl_.gnss_ == nullptr) {
    auto* p = CreateMaybeMessage<::anx::DeviceGnssSelect>(GetArenaForAllocation());
    _impl_.gnss_ = p;
  }
  return _impl_.gnss_;
}
inline ::anx::DeviceGnssSelect* AssetState::mutable_gnss() {
  ::anx::DeviceGnssSelect* _msg = _internal_mutable_gnss();
  // @@protoc_insertion_point(field_mutable:anx.AssetState.gnss)
  return _msg;
}
inline void AssetState::set_allocated_gnss(::anx::DeviceGnssSelect* gnss) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.gnss_;
  }
  if (gnss) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gnss);
    if (message_arena != submessage_arena) {
      gnss = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gnss, submessage_arena);
    }

  } else {

  }
  _impl_.gnss_ = gnss;
  // @@protoc_insertion_point(field_set_allocated:anx.AssetState.gnss)
}

// .anx.DeviceCameraSelect camera = 3;
inline bool AssetState::_internal_has_camera() const {
  return this != internal_default_instance() && _impl_.camera_ != nullptr;
}
inline bool AssetState::has_camera() const {
  return _internal_has_camera();
}
inline void AssetState::clear_camera() {
  if (GetArenaForAllocation() == nullptr && _impl_.camera_ != nullptr) {
    delete _impl_.camera_;
  }
  _impl_.camera_ = nullptr;
}
inline const ::anx::DeviceCameraSelect& AssetState::_internal_camera() const {
  const ::anx::DeviceCameraSelect* p = _impl_.camera_;
  return p != nullptr ? *p : reinterpret_cast<const ::anx::DeviceCameraSelect&>(
      ::anx::_DeviceCameraSelect_default_instance_);
}
inline const ::anx::DeviceCameraSelect& AssetState::camera() const {
  // @@protoc_insertion_point(field_get:anx.AssetState.camera)
  return _internal_camera();
}
inline void AssetState::unsafe_arena_set_allocated_camera(
    ::anx::DeviceCameraSelect* camera) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camera_);
  }
  _impl_.camera_ = camera;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anx.AssetState.camera)
}
inline ::anx::DeviceCameraSelect* AssetState::release_camera() {
  
  ::anx::DeviceCameraSelect* temp = _impl_.camera_;
  _impl_.camera_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::anx::DeviceCameraSelect* AssetState::unsafe_arena_release_camera() {
  // @@protoc_insertion_point(field_release:anx.AssetState.camera)
  
  ::anx::DeviceCameraSelect* temp = _impl_.camera_;
  _impl_.camera_ = nullptr;
  return temp;
}
inline ::anx::DeviceCameraSelect* AssetState::_internal_mutable_camera() {
  
  if (_impl_.camera_ == nullptr) {
    auto* p = CreateMaybeMessage<::anx::DeviceCameraSelect>(GetArenaForAllocation());
    _impl_.camera_ = p;
  }
  return _impl_.camera_;
}
inline ::anx::DeviceCameraSelect* AssetState::mutable_camera() {
  ::anx::DeviceCameraSelect* _msg = _internal_mutable_camera();
  // @@protoc_insertion_point(field_mutable:anx.AssetState.camera)
  return _msg;
}
inline void AssetState::set_allocated_camera(::anx::DeviceCameraSelect* camera) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.camera_;
  }
  if (camera) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camera);
    if (message_arena != submessage_arena) {
      camera = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera, submessage_arena);
    }

  } else {

  }
  _impl_.camera_ = camera;
  // @@protoc_insertion_point(field_set_allocated:anx.AssetState.camera)
}

// -------------------------------------------------------------------

// DeviceImuSelect

// repeated uint32 fps = 1;
inline int DeviceImuSelect::_internal_fps_size() const {
  return _impl_.fps_.size();
}
inline int DeviceImuSelect::fps_size() const {
  return _internal_fps_size();
}
inline void DeviceImuSelect::clear_fps() {
  _impl_.fps_.Clear();
}
inline ::uint32_t DeviceImuSelect::fps(int index) const {
  // @@protoc_insertion_point(field_get:anx.DeviceImuSelect.fps)
  return _internal_fps(index);
}
inline void DeviceImuSelect::set_fps(int index, ::uint32_t value) {
  _impl_.fps_.Set(index, value);
  // @@protoc_insertion_point(field_set:anx.DeviceImuSelect.fps)
}
inline void DeviceImuSelect::add_fps(::uint32_t value) {
  _internal_add_fps(value);
  // @@protoc_insertion_point(field_add:anx.DeviceImuSelect.fps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& DeviceImuSelect::fps() const {
  // @@protoc_insertion_point(field_list:anx.DeviceImuSelect.fps)
  return _internal_fps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* DeviceImuSelect::mutable_fps() {
  // @@protoc_insertion_point(field_mutable_list:anx.DeviceImuSelect.fps)
  return _internal_mutable_fps();
}

inline ::uint32_t DeviceImuSelect::_internal_fps(int index) const {
  return _impl_.fps_.Get(index);
}
inline void DeviceImuSelect::_internal_add_fps(::uint32_t value) { _impl_.fps_.Add(value); }
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& DeviceImuSelect::_internal_fps() const {
  return _impl_.fps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* DeviceImuSelect::_internal_mutable_fps() {
  return &_impl_.fps_;
}

// -------------------------------------------------------------------

// DeviceGnssSelect

// bool available = 1;
inline void DeviceGnssSelect::clear_available() {
  _impl_.available_ = false;
}
inline bool DeviceGnssSelect::available() const {
  // @@protoc_insertion_point(field_get:anx.DeviceGnssSelect.available)
  return _internal_available();
}
inline void DeviceGnssSelect::set_available(bool value) {
  _internal_set_available(value);
  // @@protoc_insertion_point(field_set:anx.DeviceGnssSelect.available)
}
inline bool DeviceGnssSelect::_internal_available() const {
  return _impl_.available_;
}
inline void DeviceGnssSelect::_internal_set_available(bool value) {
  ;
  _impl_.available_ = value;
}

// -------------------------------------------------------------------

// DeviceCameraSelect

// repeated .anx.DeviceCameraStream camera_streams = 1;
inline int DeviceCameraSelect::_internal_camera_streams_size() const {
  return _impl_.camera_streams_.size();
}
inline int DeviceCameraSelect::camera_streams_size() const {
  return _internal_camera_streams_size();
}
inline void DeviceCameraSelect::clear_camera_streams() {
  _impl_.camera_streams_.Clear();
}
inline ::anx::DeviceCameraStream* DeviceCameraSelect::mutable_camera_streams(int index) {
  // @@protoc_insertion_point(field_mutable:anx.DeviceCameraSelect.camera_streams)
  return _impl_.camera_streams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::anx::DeviceCameraStream >*
DeviceCameraSelect::mutable_camera_streams() {
  // @@protoc_insertion_point(field_mutable_list:anx.DeviceCameraSelect.camera_streams)
  return &_impl_.camera_streams_;
}
inline const ::anx::DeviceCameraStream& DeviceCameraSelect::_internal_camera_streams(int index) const {
  return _impl_.camera_streams_.Get(index);
}
inline const ::anx::DeviceCameraStream& DeviceCameraSelect::camera_streams(int index) const {
  // @@protoc_insertion_point(field_get:anx.DeviceCameraSelect.camera_streams)
  return _internal_camera_streams(index);
}
inline ::anx::DeviceCameraStream* DeviceCameraSelect::_internal_add_camera_streams() {
  return _impl_.camera_streams_.Add();
}
inline ::anx::DeviceCameraStream* DeviceCameraSelect::add_camera_streams() {
  ::anx::DeviceCameraStream* _add = _internal_add_camera_streams();
  // @@protoc_insertion_point(field_add:anx.DeviceCameraSelect.camera_streams)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::anx::DeviceCameraStream >&
DeviceCameraSelect::camera_streams() const {
  // @@protoc_insertion_point(field_list:anx.DeviceCameraSelect.camera_streams)
  return _impl_.camera_streams_;
}

// -------------------------------------------------------------------

// DeviceCameraStream

// uint32 fps = 1;
inline void DeviceCameraStream::clear_fps() {
  _impl_.fps_ = 0u;
}
inline ::uint32_t DeviceCameraStream::fps() const {
  // @@protoc_insertion_point(field_get:anx.DeviceCameraStream.fps)
  return _internal_fps();
}
inline void DeviceCameraStream::set_fps(::uint32_t value) {
  _internal_set_fps(value);
  // @@protoc_insertion_point(field_set:anx.DeviceCameraStream.fps)
}
inline ::uint32_t DeviceCameraStream::_internal_fps() const {
  return _impl_.fps_;
}
inline void DeviceCameraStream::_internal_set_fps(::uint32_t value) {
  ;
  _impl_.fps_ = value;
}

// uint32 width = 2;
inline void DeviceCameraStream::clear_width() {
  _impl_.width_ = 0u;
}
inline ::uint32_t DeviceCameraStream::width() const {
  // @@protoc_insertion_point(field_get:anx.DeviceCameraStream.width)
  return _internal_width();
}
inline void DeviceCameraStream::set_width(::uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:anx.DeviceCameraStream.width)
}
inline ::uint32_t DeviceCameraStream::_internal_width() const {
  return _impl_.width_;
}
inline void DeviceCameraStream::_internal_set_width(::uint32_t value) {
  ;
  _impl_.width_ = value;
}

// uint32 height = 3;
inline void DeviceCameraStream::clear_height() {
  _impl_.height_ = 0u;
}
inline ::uint32_t DeviceCameraStream::height() const {
  // @@protoc_insertion_point(field_get:anx.DeviceCameraStream.height)
  return _internal_height();
}
inline void DeviceCameraStream::set_height(::uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:anx.DeviceCameraStream.height)
}
inline ::uint32_t DeviceCameraStream::_internal_height() const {
  return _impl_.height_;
}
inline void DeviceCameraStream::_internal_set_height(::uint32_t value) {
  ;
  _impl_.height_ = value;
}

// .anx.DeviceCameraStream.PixelFormat pixel_format = 4;
inline void DeviceCameraStream::clear_pixel_format() {
  _impl_.pixel_format_ = 0;
}
inline ::anx::DeviceCameraStream_PixelFormat DeviceCameraStream::pixel_format() const {
  // @@protoc_insertion_point(field_get:anx.DeviceCameraStream.pixel_format)
  return _internal_pixel_format();
}
inline void DeviceCameraStream::set_pixel_format(::anx::DeviceCameraStream_PixelFormat value) {
   _internal_set_pixel_format(value);
  // @@protoc_insertion_point(field_set:anx.DeviceCameraStream.pixel_format)
}
inline ::anx::DeviceCameraStream_PixelFormat DeviceCameraStream::_internal_pixel_format() const {
  return static_cast<::anx::DeviceCameraStream_PixelFormat>(_impl_.pixel_format_);
}
inline void DeviceCameraStream::_internal_set_pixel_format(::anx::DeviceCameraStream_PixelFormat value) {
  ;
  _impl_.pixel_format_ = value;
}

// -------------------------------------------------------------------

// StartDeviceImu

// uint32 fps = 1;
inline void StartDeviceImu::clear_fps() {
  _impl_.fps_ = 0u;
}
inline ::uint32_t StartDeviceImu::fps() const {
  // @@protoc_insertion_point(field_get:anx.StartDeviceImu.fps)
  return _internal_fps();
}
inline void StartDeviceImu::set_fps(::uint32_t value) {
  _internal_set_fps(value);
  // @@protoc_insertion_point(field_set:anx.StartDeviceImu.fps)
}
inline ::uint32_t StartDeviceImu::_internal_fps() const {
  return _impl_.fps_;
}
inline void StartDeviceImu::_internal_set_fps(::uint32_t value) {
  ;
  _impl_.fps_ = value;
}

// -------------------------------------------------------------------

// StartDeviceCamera

// .anx.DeviceCameraStream camera_stream = 1;
inline bool StartDeviceCamera::_internal_has_camera_stream() const {
  return this != internal_default_instance() && _impl_.camera_stream_ != nullptr;
}
inline bool StartDeviceCamera::has_camera_stream() const {
  return _internal_has_camera_stream();
}
inline void StartDeviceCamera::clear_camera_stream() {
  if (GetArenaForAllocation() == nullptr && _impl_.camera_stream_ != nullptr) {
    delete _impl_.camera_stream_;
  }
  _impl_.camera_stream_ = nullptr;
}
inline const ::anx::DeviceCameraStream& StartDeviceCamera::_internal_camera_stream() const {
  const ::anx::DeviceCameraStream* p = _impl_.camera_stream_;
  return p != nullptr ? *p : reinterpret_cast<const ::anx::DeviceCameraStream&>(
      ::anx::_DeviceCameraStream_default_instance_);
}
inline const ::anx::DeviceCameraStream& StartDeviceCamera::camera_stream() const {
  // @@protoc_insertion_point(field_get:anx.StartDeviceCamera.camera_stream)
  return _internal_camera_stream();
}
inline void StartDeviceCamera::unsafe_arena_set_allocated_camera_stream(
    ::anx::DeviceCameraStream* camera_stream) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camera_stream_);
  }
  _impl_.camera_stream_ = camera_stream;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anx.StartDeviceCamera.camera_stream)
}
inline ::anx::DeviceCameraStream* StartDeviceCamera::release_camera_stream() {
  
  ::anx::DeviceCameraStream* temp = _impl_.camera_stream_;
  _impl_.camera_stream_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::anx::DeviceCameraStream* StartDeviceCamera::unsafe_arena_release_camera_stream() {
  // @@protoc_insertion_point(field_release:anx.StartDeviceCamera.camera_stream)
  
  ::anx::DeviceCameraStream* temp = _impl_.camera_stream_;
  _impl_.camera_stream_ = nullptr;
  return temp;
}
inline ::anx::DeviceCameraStream* StartDeviceCamera::_internal_mutable_camera_stream() {
  
  if (_impl_.camera_stream_ == nullptr) {
    auto* p = CreateMaybeMessage<::anx::DeviceCameraStream>(GetArenaForAllocation());
    _impl_.camera_stream_ = p;
  }
  return _impl_.camera_stream_;
}
inline ::anx::DeviceCameraStream* StartDeviceCamera::mutable_camera_stream() {
  ::anx::DeviceCameraStream* _msg = _internal_mutable_camera_stream();
  // @@protoc_insertion_point(field_mutable:anx.StartDeviceCamera.camera_stream)
  return _msg;
}
inline void StartDeviceCamera::set_allocated_camera_stream(::anx::DeviceCameraStream* camera_stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.camera_stream_;
  }
  if (camera_stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camera_stream);
    if (message_arena != submessage_arena) {
      camera_stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_stream, submessage_arena);
    }

  } else {

  }
  _impl_.camera_stream_ = camera_stream;
  // @@protoc_insertion_point(field_set_allocated:anx.StartDeviceCamera.camera_stream)
}

// -------------------------------------------------------------------

// ImuData_Filtered

// .anx.Vector3 acceleration = 1;
inline bool ImuData_Filtered::_internal_has_acceleration() const {
  return this != internal_default_instance() && _impl_.acceleration_ != nullptr;
}
inline bool ImuData_Filtered::has_acceleration() const {
  return _internal_has_acceleration();
}
inline const ::anx::Vector3& ImuData_Filtered::_internal_acceleration() const {
  const ::anx::Vector3* p = _impl_.acceleration_;
  return p != nullptr ? *p : reinterpret_cast<const ::anx::Vector3&>(
      ::anx::_Vector3_default_instance_);
}
inline const ::anx::Vector3& ImuData_Filtered::acceleration() const {
  // @@protoc_insertion_point(field_get:anx.ImuData.Filtered.acceleration)
  return _internal_acceleration();
}
inline void ImuData_Filtered::unsafe_arena_set_allocated_acceleration(
    ::anx::Vector3* acceleration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.acceleration_);
  }
  _impl_.acceleration_ = acceleration;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anx.ImuData.Filtered.acceleration)
}
inline ::anx::Vector3* ImuData_Filtered::release_acceleration() {
  
  ::anx::Vector3* temp = _impl_.acceleration_;
  _impl_.acceleration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::anx::Vector3* ImuData_Filtered::unsafe_arena_release_acceleration() {
  // @@protoc_insertion_point(field_release:anx.ImuData.Filtered.acceleration)
  
  ::anx::Vector3* temp = _impl_.acceleration_;
  _impl_.acceleration_ = nullptr;
  return temp;
}
inline ::anx::Vector3* ImuData_Filtered::_internal_mutable_acceleration() {
  
  if (_impl_.acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::anx::Vector3>(GetArenaForAllocation());
    _impl_.acceleration_ = p;
  }
  return _impl_.acceleration_;
}
inline ::anx::Vector3* ImuData_Filtered::mutable_acceleration() {
  ::anx::Vector3* _msg = _internal_mutable_acceleration();
  // @@protoc_insertion_point(field_mutable:anx.ImuData.Filtered.acceleration)
  return _msg;
}
inline void ImuData_Filtered::set_allocated_acceleration(::anx::Vector3* acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.acceleration_);
  }
  if (acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acceleration));
    if (message_arena != submessage_arena) {
      acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acceleration, submessage_arena);
    }

  } else {

  }
  _impl_.acceleration_ = acceleration;
  // @@protoc_insertion_point(field_set_allocated:anx.ImuData.Filtered.acceleration)
}

// .anx.Vector3 angular_velocity = 2;
inline bool ImuData_Filtered::_internal_has_angular_velocity() const {
  return this != internal_default_instance() && _impl_.angular_velocity_ != nullptr;
}
inline bool ImuData_Filtered::has_angular_velocity() const {
  return _internal_has_angular_velocity();
}
inline const ::anx::Vector3& ImuData_Filtered::_internal_angular_velocity() const {
  const ::anx::Vector3* p = _impl_.angular_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::anx::Vector3&>(
      ::anx::_Vector3_default_instance_);
}
inline const ::anx::Vector3& ImuData_Filtered::angular_velocity() const {
  // @@protoc_insertion_point(field_get:anx.ImuData.Filtered.angular_velocity)
  return _internal_angular_velocity();
}
inline void ImuData_Filtered::unsafe_arena_set_allocated_angular_velocity(
    ::anx::Vector3* angular_velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.angular_velocity_);
  }
  _impl_.angular_velocity_ = angular_velocity;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anx.ImuData.Filtered.angular_velocity)
}
inline ::anx::Vector3* ImuData_Filtered::release_angular_velocity() {
  
  ::anx::Vector3* temp = _impl_.angular_velocity_;
  _impl_.angular_velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::anx::Vector3* ImuData_Filtered::unsafe_arena_release_angular_velocity() {
  // @@protoc_insertion_point(field_release:anx.ImuData.Filtered.angular_velocity)
  
  ::anx::Vector3* temp = _impl_.angular_velocity_;
  _impl_.angular_velocity_ = nullptr;
  return temp;
}
inline ::anx::Vector3* ImuData_Filtered::_internal_mutable_angular_velocity() {
  
  if (_impl_.angular_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::anx::Vector3>(GetArenaForAllocation());
    _impl_.angular_velocity_ = p;
  }
  return _impl_.angular_velocity_;
}
inline ::anx::Vector3* ImuData_Filtered::mutable_angular_velocity() {
  ::anx::Vector3* _msg = _internal_mutable_angular_velocity();
  // @@protoc_insertion_point(field_mutable:anx.ImuData.Filtered.angular_velocity)
  return _msg;
}
inline void ImuData_Filtered::set_allocated_angular_velocity(::anx::Vector3* angular_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.angular_velocity_);
  }
  if (angular_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_velocity));
    if (message_arena != submessage_arena) {
      angular_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular_velocity, submessage_arena);
    }

  } else {

  }
  _impl_.angular_velocity_ = angular_velocity;
  // @@protoc_insertion_point(field_set_allocated:anx.ImuData.Filtered.angular_velocity)
}

// .anx.Quaternion orientation = 3;
inline bool ImuData_Filtered::_internal_has_orientation() const {
  return this != internal_default_instance() && _impl_.orientation_ != nullptr;
}
inline bool ImuData_Filtered::has_orientation() const {
  return _internal_has_orientation();
}
inline const ::anx::Quaternion& ImuData_Filtered::_internal_orientation() const {
  const ::anx::Quaternion* p = _impl_.orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::anx::Quaternion&>(
      ::anx::_Quaternion_default_instance_);
}
inline const ::anx::Quaternion& ImuData_Filtered::orientation() const {
  // @@protoc_insertion_point(field_get:anx.ImuData.Filtered.orientation)
  return _internal_orientation();
}
inline void ImuData_Filtered::unsafe_arena_set_allocated_orientation(
    ::anx::Quaternion* orientation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orientation_);
  }
  _impl_.orientation_ = orientation;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anx.ImuData.Filtered.orientation)
}
inline ::anx::Quaternion* ImuData_Filtered::release_orientation() {
  
  ::anx::Quaternion* temp = _impl_.orientation_;
  _impl_.orientation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::anx::Quaternion* ImuData_Filtered::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:anx.ImuData.Filtered.orientation)
  
  ::anx::Quaternion* temp = _impl_.orientation_;
  _impl_.orientation_ = nullptr;
  return temp;
}
inline ::anx::Quaternion* ImuData_Filtered::_internal_mutable_orientation() {
  
  if (_impl_.orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::anx::Quaternion>(GetArenaForAllocation());
    _impl_.orientation_ = p;
  }
  return _impl_.orientation_;
}
inline ::anx::Quaternion* ImuData_Filtered::mutable_orientation() {
  ::anx::Quaternion* _msg = _internal_mutable_orientation();
  // @@protoc_insertion_point(field_mutable:anx.ImuData.Filtered.orientation)
  return _msg;
}
inline void ImuData_Filtered::set_allocated_orientation(::anx::Quaternion* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orientation_);
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation));
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }

  } else {

  }
  _impl_.orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:anx.ImuData.Filtered.orientation)
}

// -------------------------------------------------------------------

// ImuData_Raw

// .anx.Vector3 acceleration = 1;
inline bool ImuData_Raw::_internal_has_acceleration() const {
  return this != internal_default_instance() && _impl_.acceleration_ != nullptr;
}
inline bool ImuData_Raw::has_acceleration() const {
  return _internal_has_acceleration();
}
inline const ::anx::Vector3& ImuData_Raw::_internal_acceleration() const {
  const ::anx::Vector3* p = _impl_.acceleration_;
  return p != nullptr ? *p : reinterpret_cast<const ::anx::Vector3&>(
      ::anx::_Vector3_default_instance_);
}
inline const ::anx::Vector3& ImuData_Raw::acceleration() const {
  // @@protoc_insertion_point(field_get:anx.ImuData.Raw.acceleration)
  return _internal_acceleration();
}
inline void ImuData_Raw::unsafe_arena_set_allocated_acceleration(
    ::anx::Vector3* acceleration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.acceleration_);
  }
  _impl_.acceleration_ = acceleration;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anx.ImuData.Raw.acceleration)
}
inline ::anx::Vector3* ImuData_Raw::release_acceleration() {
  
  ::anx::Vector3* temp = _impl_.acceleration_;
  _impl_.acceleration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::anx::Vector3* ImuData_Raw::unsafe_arena_release_acceleration() {
  // @@protoc_insertion_point(field_release:anx.ImuData.Raw.acceleration)
  
  ::anx::Vector3* temp = _impl_.acceleration_;
  _impl_.acceleration_ = nullptr;
  return temp;
}
inline ::anx::Vector3* ImuData_Raw::_internal_mutable_acceleration() {
  
  if (_impl_.acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::anx::Vector3>(GetArenaForAllocation());
    _impl_.acceleration_ = p;
  }
  return _impl_.acceleration_;
}
inline ::anx::Vector3* ImuData_Raw::mutable_acceleration() {
  ::anx::Vector3* _msg = _internal_mutable_acceleration();
  // @@protoc_insertion_point(field_mutable:anx.ImuData.Raw.acceleration)
  return _msg;
}
inline void ImuData_Raw::set_allocated_acceleration(::anx::Vector3* acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.acceleration_);
  }
  if (acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acceleration));
    if (message_arena != submessage_arena) {
      acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acceleration, submessage_arena);
    }

  } else {

  }
  _impl_.acceleration_ = acceleration;
  // @@protoc_insertion_point(field_set_allocated:anx.ImuData.Raw.acceleration)
}

// .anx.Vector3 angular_velocity = 2;
inline bool ImuData_Raw::_internal_has_angular_velocity() const {
  return this != internal_default_instance() && _impl_.angular_velocity_ != nullptr;
}
inline bool ImuData_Raw::has_angular_velocity() const {
  return _internal_has_angular_velocity();
}
inline const ::anx::Vector3& ImuData_Raw::_internal_angular_velocity() const {
  const ::anx::Vector3* p = _impl_.angular_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::anx::Vector3&>(
      ::anx::_Vector3_default_instance_);
}
inline const ::anx::Vector3& ImuData_Raw::angular_velocity() const {
  // @@protoc_insertion_point(field_get:anx.ImuData.Raw.angular_velocity)
  return _internal_angular_velocity();
}
inline void ImuData_Raw::unsafe_arena_set_allocated_angular_velocity(
    ::anx::Vector3* angular_velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.angular_velocity_);
  }
  _impl_.angular_velocity_ = angular_velocity;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anx.ImuData.Raw.angular_velocity)
}
inline ::anx::Vector3* ImuData_Raw::release_angular_velocity() {
  
  ::anx::Vector3* temp = _impl_.angular_velocity_;
  _impl_.angular_velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::anx::Vector3* ImuData_Raw::unsafe_arena_release_angular_velocity() {
  // @@protoc_insertion_point(field_release:anx.ImuData.Raw.angular_velocity)
  
  ::anx::Vector3* temp = _impl_.angular_velocity_;
  _impl_.angular_velocity_ = nullptr;
  return temp;
}
inline ::anx::Vector3* ImuData_Raw::_internal_mutable_angular_velocity() {
  
  if (_impl_.angular_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::anx::Vector3>(GetArenaForAllocation());
    _impl_.angular_velocity_ = p;
  }
  return _impl_.angular_velocity_;
}
inline ::anx::Vector3* ImuData_Raw::mutable_angular_velocity() {
  ::anx::Vector3* _msg = _internal_mutable_angular_velocity();
  // @@protoc_insertion_point(field_mutable:anx.ImuData.Raw.angular_velocity)
  return _msg;
}
inline void ImuData_Raw::set_allocated_angular_velocity(::anx::Vector3* angular_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.angular_velocity_);
  }
  if (angular_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_velocity));
    if (message_arena != submessage_arena) {
      angular_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular_velocity, submessage_arena);
    }

  } else {

  }
  _impl_.angular_velocity_ = angular_velocity;
  // @@protoc_insertion_point(field_set_allocated:anx.ImuData.Raw.angular_velocity)
}

// .anx.Vector3 magnetic_field_in_micro_tesla = 3;
inline bool ImuData_Raw::_internal_has_magnetic_field_in_micro_tesla() const {
  return this != internal_default_instance() && _impl_.magnetic_field_in_micro_tesla_ != nullptr;
}
inline bool ImuData_Raw::has_magnetic_field_in_micro_tesla() const {
  return _internal_has_magnetic_field_in_micro_tesla();
}
inline const ::anx::Vector3& ImuData_Raw::_internal_magnetic_field_in_micro_tesla() const {
  const ::anx::Vector3* p = _impl_.magnetic_field_in_micro_tesla_;
  return p != nullptr ? *p : reinterpret_cast<const ::anx::Vector3&>(
      ::anx::_Vector3_default_instance_);
}
inline const ::anx::Vector3& ImuData_Raw::magnetic_field_in_micro_tesla() const {
  // @@protoc_insertion_point(field_get:anx.ImuData.Raw.magnetic_field_in_micro_tesla)
  return _internal_magnetic_field_in_micro_tesla();
}
inline void ImuData_Raw::unsafe_arena_set_allocated_magnetic_field_in_micro_tesla(
    ::anx::Vector3* magnetic_field_in_micro_tesla) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.magnetic_field_in_micro_tesla_);
  }
  _impl_.magnetic_field_in_micro_tesla_ = magnetic_field_in_micro_tesla;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anx.ImuData.Raw.magnetic_field_in_micro_tesla)
}
inline ::anx::Vector3* ImuData_Raw::release_magnetic_field_in_micro_tesla() {
  
  ::anx::Vector3* temp = _impl_.magnetic_field_in_micro_tesla_;
  _impl_.magnetic_field_in_micro_tesla_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::anx::Vector3* ImuData_Raw::unsafe_arena_release_magnetic_field_in_micro_tesla() {
  // @@protoc_insertion_point(field_release:anx.ImuData.Raw.magnetic_field_in_micro_tesla)
  
  ::anx::Vector3* temp = _impl_.magnetic_field_in_micro_tesla_;
  _impl_.magnetic_field_in_micro_tesla_ = nullptr;
  return temp;
}
inline ::anx::Vector3* ImuData_Raw::_internal_mutable_magnetic_field_in_micro_tesla() {
  
  if (_impl_.magnetic_field_in_micro_tesla_ == nullptr) {
    auto* p = CreateMaybeMessage<::anx::Vector3>(GetArenaForAllocation());
    _impl_.magnetic_field_in_micro_tesla_ = p;
  }
  return _impl_.magnetic_field_in_micro_tesla_;
}
inline ::anx::Vector3* ImuData_Raw::mutable_magnetic_field_in_micro_tesla() {
  ::anx::Vector3* _msg = _internal_mutable_magnetic_field_in_micro_tesla();
  // @@protoc_insertion_point(field_mutable:anx.ImuData.Raw.magnetic_field_in_micro_tesla)
  return _msg;
}
inline void ImuData_Raw::set_allocated_magnetic_field_in_micro_tesla(::anx::Vector3* magnetic_field_in_micro_tesla) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.magnetic_field_in_micro_tesla_);
  }
  if (magnetic_field_in_micro_tesla) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(magnetic_field_in_micro_tesla));
    if (message_arena != submessage_arena) {
      magnetic_field_in_micro_tesla = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, magnetic_field_in_micro_tesla, submessage_arena);
    }

  } else {

  }
  _impl_.magnetic_field_in_micro_tesla_ = magnetic_field_in_micro_tesla;
  // @@protoc_insertion_point(field_set_allocated:anx.ImuData.Raw.magnetic_field_in_micro_tesla)
}

// -------------------------------------------------------------------

// ImuData

// .anx.ImuData.Filtered filtered = 1;
inline bool ImuData::_internal_has_filtered() const {
  return this != internal_default_instance() && _impl_.filtered_ != nullptr;
}
inline bool ImuData::has_filtered() const {
  return _internal_has_filtered();
}
inline void ImuData::clear_filtered() {
  if (GetArenaForAllocation() == nullptr && _impl_.filtered_ != nullptr) {
    delete _impl_.filtered_;
  }
  _impl_.filtered_ = nullptr;
}
inline const ::anx::ImuData_Filtered& ImuData::_internal_filtered() const {
  const ::anx::ImuData_Filtered* p = _impl_.filtered_;
  return p != nullptr ? *p : reinterpret_cast<const ::anx::ImuData_Filtered&>(
      ::anx::_ImuData_Filtered_default_instance_);
}
inline const ::anx::ImuData_Filtered& ImuData::filtered() const {
  // @@protoc_insertion_point(field_get:anx.ImuData.filtered)
  return _internal_filtered();
}
inline void ImuData::unsafe_arena_set_allocated_filtered(
    ::anx::ImuData_Filtered* filtered) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.filtered_);
  }
  _impl_.filtered_ = filtered;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anx.ImuData.filtered)
}
inline ::anx::ImuData_Filtered* ImuData::release_filtered() {
  
  ::anx::ImuData_Filtered* temp = _impl_.filtered_;
  _impl_.filtered_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::anx::ImuData_Filtered* ImuData::unsafe_arena_release_filtered() {
  // @@protoc_insertion_point(field_release:anx.ImuData.filtered)
  
  ::anx::ImuData_Filtered* temp = _impl_.filtered_;
  _impl_.filtered_ = nullptr;
  return temp;
}
inline ::anx::ImuData_Filtered* ImuData::_internal_mutable_filtered() {
  
  if (_impl_.filtered_ == nullptr) {
    auto* p = CreateMaybeMessage<::anx::ImuData_Filtered>(GetArenaForAllocation());
    _impl_.filtered_ = p;
  }
  return _impl_.filtered_;
}
inline ::anx::ImuData_Filtered* ImuData::mutable_filtered() {
  ::anx::ImuData_Filtered* _msg = _internal_mutable_filtered();
  // @@protoc_insertion_point(field_mutable:anx.ImuData.filtered)
  return _msg;
}
inline void ImuData::set_allocated_filtered(::anx::ImuData_Filtered* filtered) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.filtered_;
  }
  if (filtered) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(filtered);
    if (message_arena != submessage_arena) {
      filtered = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filtered, submessage_arena);
    }

  } else {

  }
  _impl_.filtered_ = filtered;
  // @@protoc_insertion_point(field_set_allocated:anx.ImuData.filtered)
}

// .anx.ImuData.Raw raw = 2;
inline bool ImuData::_internal_has_raw() const {
  return this != internal_default_instance() && _impl_.raw_ != nullptr;
}
inline bool ImuData::has_raw() const {
  return _internal_has_raw();
}
inline void ImuData::clear_raw() {
  if (GetArenaForAllocation() == nullptr && _impl_.raw_ != nullptr) {
    delete _impl_.raw_;
  }
  _impl_.raw_ = nullptr;
}
inline const ::anx::ImuData_Raw& ImuData::_internal_raw() const {
  const ::anx::ImuData_Raw* p = _impl_.raw_;
  return p != nullptr ? *p : reinterpret_cast<const ::anx::ImuData_Raw&>(
      ::anx::_ImuData_Raw_default_instance_);
}
inline const ::anx::ImuData_Raw& ImuData::raw() const {
  // @@protoc_insertion_point(field_get:anx.ImuData.raw)
  return _internal_raw();
}
inline void ImuData::unsafe_arena_set_allocated_raw(
    ::anx::ImuData_Raw* raw) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.raw_);
  }
  _impl_.raw_ = raw;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anx.ImuData.raw)
}
inline ::anx::ImuData_Raw* ImuData::release_raw() {
  
  ::anx::ImuData_Raw* temp = _impl_.raw_;
  _impl_.raw_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::anx::ImuData_Raw* ImuData::unsafe_arena_release_raw() {
  // @@protoc_insertion_point(field_release:anx.ImuData.raw)
  
  ::anx::ImuData_Raw* temp = _impl_.raw_;
  _impl_.raw_ = nullptr;
  return temp;
}
inline ::anx::ImuData_Raw* ImuData::_internal_mutable_raw() {
  
  if (_impl_.raw_ == nullptr) {
    auto* p = CreateMaybeMessage<::anx::ImuData_Raw>(GetArenaForAllocation());
    _impl_.raw_ = p;
  }
  return _impl_.raw_;
}
inline ::anx::ImuData_Raw* ImuData::mutable_raw() {
  ::anx::ImuData_Raw* _msg = _internal_mutable_raw();
  // @@protoc_insertion_point(field_mutable:anx.ImuData.raw)
  return _msg;
}
inline void ImuData::set_allocated_raw(::anx::ImuData_Raw* raw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.raw_;
  }
  if (raw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(raw);
    if (message_arena != submessage_arena) {
      raw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raw, submessage_arena);
    }

  } else {

  }
  _impl_.raw_ = raw;
  // @@protoc_insertion_point(field_set_allocated:anx.ImuData.raw)
}

// -------------------------------------------------------------------

// GnssData

// string nmea = 1;
inline void GnssData::clear_nmea() {
  _impl_.nmea_.ClearToEmpty();
}
inline const std::string& GnssData::nmea() const {
  // @@protoc_insertion_point(field_get:anx.GnssData.nmea)
  return _internal_nmea();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GnssData::set_nmea(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.nmea_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:anx.GnssData.nmea)
}
inline std::string* GnssData::mutable_nmea() {
  std::string* _s = _internal_mutable_nmea();
  // @@protoc_insertion_point(field_mutable:anx.GnssData.nmea)
  return _s;
}
inline const std::string& GnssData::_internal_nmea() const {
  return _impl_.nmea_.Get();
}
inline void GnssData::_internal_set_nmea(const std::string& value) {
  ;


  _impl_.nmea_.Set(value, GetArenaForAllocation());
}
inline std::string* GnssData::_internal_mutable_nmea() {
  ;
  return _impl_.nmea_.Mutable( GetArenaForAllocation());
}
inline std::string* GnssData::release_nmea() {
  // @@protoc_insertion_point(field_release:anx.GnssData.nmea)
  return _impl_.nmea_.Release();
}
inline void GnssData::set_allocated_nmea(std::string* value) {
  _impl_.nmea_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nmea_.IsDefault()) {
          _impl_.nmea_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:anx.GnssData.nmea)
}

// -------------------------------------------------------------------

// CameraData

// bytes image = 1;
inline void CameraData::clear_image() {
  _impl_.image_.ClearToEmpty();
}
inline const std::string& CameraData::image() const {
  // @@protoc_insertion_point(field_get:anx.CameraData.image)
  return _internal_image();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CameraData::set_image(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.image_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:anx.CameraData.image)
}
inline std::string* CameraData::mutable_image() {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:anx.CameraData.image)
  return _s;
}
inline const std::string& CameraData::_internal_image() const {
  return _impl_.image_.Get();
}
inline void CameraData::_internal_set_image(const std::string& value) {
  ;


  _impl_.image_.Set(value, GetArenaForAllocation());
}
inline std::string* CameraData::_internal_mutable_image() {
  ;
  return _impl_.image_.Mutable( GetArenaForAllocation());
}
inline std::string* CameraData::release_image() {
  // @@protoc_insertion_point(field_release:anx.CameraData.image)
  return _impl_.image_.Release();
}
inline void CameraData::set_allocated_image(std::string* value) {
  _impl_.image_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.image_.IsDefault()) {
          _impl_.image_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:anx.CameraData.image)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace anx


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::anx::DeviceCameraStream_PixelFormat> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::anx::DeviceCameraStream_PixelFormat>() {
  return ::anx::DeviceCameraStream_PixelFormat_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_assets_2eproto_2epb_2eh

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_device_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_device_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4022000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4022000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_device_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_device_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_device_2eproto;
namespace anx {
class DeviceLog;
struct DeviceLogDefaultTypeInternal;
extern DeviceLogDefaultTypeInternal _DeviceLog_default_instance_;
class GetImeiNumbersResponse;
struct GetImeiNumbersResponseDefaultTypeInternal;
extern GetImeiNumbersResponseDefaultTypeInternal _GetImeiNumbersResponse_default_instance_;
class SetWifiRequest;
struct SetWifiRequestDefaultTypeInternal;
extern SetWifiRequestDefaultTypeInternal _SetWifiRequest_default_instance_;
class VersionResponse;
struct VersionResponseDefaultTypeInternal;
extern VersionResponseDefaultTypeInternal _VersionResponse_default_instance_;
}  // namespace anx
PROTOBUF_NAMESPACE_OPEN
template <>
::anx::DeviceLog* Arena::CreateMaybeMessage<::anx::DeviceLog>(Arena*);
template <>
::anx::GetImeiNumbersResponse* Arena::CreateMaybeMessage<::anx::GetImeiNumbersResponse>(Arena*);
template <>
::anx::SetWifiRequest* Arena::CreateMaybeMessage<::anx::SetWifiRequest>(Arena*);
template <>
::anx::VersionResponse* Arena::CreateMaybeMessage<::anx::VersionResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace anx {
enum DeviceLog_Level : int {
  DeviceLog_Level_VERBOSE = 0,
  DeviceLog_Level_DEBUG = 1,
  DeviceLog_Level_ERROR = 2,
  DeviceLog_Level_INFO = 3,
  DeviceLog_Level_WARN = 4,
  DeviceLog_Level_FATAL = 5,
  DeviceLog_Level_SILENT = 6,
  DeviceLog_Level_DeviceLog_Level_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  DeviceLog_Level_DeviceLog_Level_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool DeviceLog_Level_IsValid(int value);
constexpr DeviceLog_Level DeviceLog_Level_Level_MIN = static_cast<DeviceLog_Level>(0);
constexpr DeviceLog_Level DeviceLog_Level_Level_MAX = static_cast<DeviceLog_Level>(6);
constexpr int DeviceLog_Level_Level_ARRAYSIZE = 6 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
DeviceLog_Level_descriptor();
template <typename T>
const std::string& DeviceLog_Level_Name(T value) {
  static_assert(std::is_same<T, DeviceLog_Level>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Level_Name().");
  return DeviceLog_Level_Name(static_cast<DeviceLog_Level>(value));
}
template <>
inline const std::string& DeviceLog_Level_Name(DeviceLog_Level value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<DeviceLog_Level_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool DeviceLog_Level_Parse(absl::string_view name, DeviceLog_Level* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DeviceLog_Level>(
      DeviceLog_Level_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class GetImeiNumbersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:anx.GetImeiNumbersResponse) */ {
 public:
  inline GetImeiNumbersResponse() : GetImeiNumbersResponse(nullptr) {}
  ~GetImeiNumbersResponse() override;
  explicit PROTOBUF_CONSTEXPR GetImeiNumbersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetImeiNumbersResponse(const GetImeiNumbersResponse& from);
  GetImeiNumbersResponse(GetImeiNumbersResponse&& from) noexcept
    : GetImeiNumbersResponse() {
    *this = ::std::move(from);
  }

  inline GetImeiNumbersResponse& operator=(const GetImeiNumbersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetImeiNumbersResponse& operator=(GetImeiNumbersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetImeiNumbersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetImeiNumbersResponse* internal_default_instance() {
    return reinterpret_cast<const GetImeiNumbersResponse*>(
               &_GetImeiNumbersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetImeiNumbersResponse& a, GetImeiNumbersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetImeiNumbersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetImeiNumbersResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetImeiNumbersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetImeiNumbersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetImeiNumbersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetImeiNumbersResponse& from) {
    GetImeiNumbersResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetImeiNumbersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "anx.GetImeiNumbersResponse";
  }
  protected:
  explicit GetImeiNumbersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImeisFieldNumber = 1,
  };
  // repeated string imeis = 1;
  int imeis_size() const;
  private:
  int _internal_imeis_size() const;

  public:
  void clear_imeis() ;
  const std::string& imeis(int index) const;
  std::string* mutable_imeis(int index);
  void set_imeis(int index, const std::string& value);
  void set_imeis(int index, std::string&& value);
  void set_imeis(int index, const char* value);
  void set_imeis(int index, const char* value, std::size_t size);
  void set_imeis(int index, absl::string_view value);
  std::string* add_imeis();
  void add_imeis(const std::string& value);
  void add_imeis(std::string&& value);
  void add_imeis(const char* value);
  void add_imeis(const char* value, std::size_t size);
  void add_imeis(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& imeis() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_imeis();

  private:
  const std::string& _internal_imeis(int index) const;
  std::string* _internal_add_imeis();

  public:
  // @@protoc_insertion_point(class_scope:anx.GetImeiNumbersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> imeis_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_device_2eproto;
};// -------------------------------------------------------------------

class SetWifiRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:anx.SetWifiRequest) */ {
 public:
  inline SetWifiRequest() : SetWifiRequest(nullptr) {}
  ~SetWifiRequest() override;
  explicit PROTOBUF_CONSTEXPR SetWifiRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetWifiRequest(const SetWifiRequest& from);
  SetWifiRequest(SetWifiRequest&& from) noexcept
    : SetWifiRequest() {
    *this = ::std::move(from);
  }

  inline SetWifiRequest& operator=(const SetWifiRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetWifiRequest& operator=(SetWifiRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetWifiRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetWifiRequest* internal_default_instance() {
    return reinterpret_cast<const SetWifiRequest*>(
               &_SetWifiRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SetWifiRequest& a, SetWifiRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetWifiRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetWifiRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetWifiRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetWifiRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetWifiRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetWifiRequest& from) {
    SetWifiRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetWifiRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "anx.SetWifiRequest";
  }
  protected:
  explicit SetWifiRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSsidFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string ssid = 1;
  void clear_ssid() ;
  const std::string& ssid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ssid(Arg_&& arg, Args_... args);
  std::string* mutable_ssid();
  PROTOBUF_NODISCARD std::string* release_ssid();
  void set_allocated_ssid(std::string* ptr);

  private:
  const std::string& _internal_ssid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ssid(
      const std::string& value);
  std::string* _internal_mutable_ssid();

  public:
  // string password = 2;
  void clear_password() ;
  const std::string& password() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* ptr);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // @@protoc_insertion_point(class_scope:anx.SetWifiRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_device_2eproto;
};// -------------------------------------------------------------------

class DeviceLog final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:anx.DeviceLog) */ {
 public:
  inline DeviceLog() : DeviceLog(nullptr) {}
  ~DeviceLog() override;
  explicit PROTOBUF_CONSTEXPR DeviceLog(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceLog(const DeviceLog& from);
  DeviceLog(DeviceLog&& from) noexcept
    : DeviceLog() {
    *this = ::std::move(from);
  }

  inline DeviceLog& operator=(const DeviceLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceLog& operator=(DeviceLog&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceLog& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceLog* internal_default_instance() {
    return reinterpret_cast<const DeviceLog*>(
               &_DeviceLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DeviceLog& a, DeviceLog& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceLog* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceLog* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceLog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceLog>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceLog& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeviceLog& from) {
    DeviceLog::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceLog* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "anx.DeviceLog";
  }
  protected:
  explicit DeviceLog(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Level = DeviceLog_Level;
  static constexpr Level VERBOSE = DeviceLog_Level_VERBOSE;
  static constexpr Level DEBUG = DeviceLog_Level_DEBUG;
  static constexpr Level ERROR = DeviceLog_Level_ERROR;
  static constexpr Level INFO = DeviceLog_Level_INFO;
  static constexpr Level WARN = DeviceLog_Level_WARN;
  static constexpr Level FATAL = DeviceLog_Level_FATAL;
  static constexpr Level SILENT = DeviceLog_Level_SILENT;
  static inline bool Level_IsValid(int value) {
    return DeviceLog_Level_IsValid(value);
  }
  static constexpr Level Level_MIN = DeviceLog_Level_Level_MIN;
  static constexpr Level Level_MAX = DeviceLog_Level_Level_MAX;
  static constexpr int Level_ARRAYSIZE = DeviceLog_Level_Level_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Level_descriptor() {
    return DeviceLog_Level_descriptor();
  }
  template <typename T>
  static inline const std::string& Level_Name(T value) {
    return DeviceLog_Level_Name(value);
  }
  static inline bool Level_Parse(absl::string_view name, Level* value) {
    return DeviceLog_Level_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 5,
    kMsgFieldNumber = 6,
    kPidFieldNumber = 1,
    kTidFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kLevelFieldNumber = 4,
  };
  // string tag = 5;
  void clear_tag() ;
  const std::string& tag() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tag(Arg_&& arg, Args_... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* ptr);

  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(
      const std::string& value);
  std::string* _internal_mutable_tag();

  public:
  // string msg = 6;
  void clear_msg() ;
  const std::string& msg() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_msg(Arg_&& arg, Args_... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* ptr);

  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(
      const std::string& value);
  std::string* _internal_mutable_msg();

  public:
  // uint32 pid = 1;
  void clear_pid() ;
  ::uint32_t pid() const;
  void set_pid(::uint32_t value);

  private:
  ::uint32_t _internal_pid() const;
  void _internal_set_pid(::uint32_t value);

  public:
  // uint32 tid = 2;
  void clear_tid() ;
  ::uint32_t tid() const;
  void set_tid(::uint32_t value);

  private:
  ::uint32_t _internal_tid() const;
  void _internal_set_tid(::uint32_t value);

  public:
  // uint64 timestamp = 3;
  void clear_timestamp() ;
  ::uint64_t timestamp() const;
  void set_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(::uint64_t value);

  public:
  // .anx.DeviceLog.Level level = 4;
  void clear_level() ;
  ::anx::DeviceLog_Level level() const;
  void set_level(::anx::DeviceLog_Level value);

  private:
  ::anx::DeviceLog_Level _internal_level() const;
  void _internal_set_level(::anx::DeviceLog_Level value);

  public:
  // @@protoc_insertion_point(class_scope:anx.DeviceLog)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    ::uint32_t pid_;
    ::uint32_t tid_;
    ::uint64_t timestamp_;
    int level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_device_2eproto;
};// -------------------------------------------------------------------

class VersionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:anx.VersionResponse) */ {
 public:
  inline VersionResponse() : VersionResponse(nullptr) {}
  ~VersionResponse() override;
  explicit PROTOBUF_CONSTEXPR VersionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VersionResponse(const VersionResponse& from);
  VersionResponse(VersionResponse&& from) noexcept
    : VersionResponse() {
    *this = ::std::move(from);
  }

  inline VersionResponse& operator=(const VersionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionResponse& operator=(VersionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VersionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const VersionResponse* internal_default_instance() {
    return reinterpret_cast<const VersionResponse*>(
               &_VersionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VersionResponse& a, VersionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VersionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VersionResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VersionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VersionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VersionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VersionResponse& from) {
    VersionResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "anx.VersionResponse";
  }
  protected:
  explicit VersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
  };
  // string version = 1;
  void clear_version() ;
  const std::string& version() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* ptr);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // @@protoc_insertion_point(class_scope:anx.VersionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_device_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GetImeiNumbersResponse

// repeated string imeis = 1;
inline int GetImeiNumbersResponse::_internal_imeis_size() const {
  return _impl_.imeis_.size();
}
inline int GetImeiNumbersResponse::imeis_size() const {
  return _internal_imeis_size();
}
inline void GetImeiNumbersResponse::clear_imeis() {
  _impl_.imeis_.Clear();
}
inline std::string* GetImeiNumbersResponse::add_imeis() {
  std::string* _s = _internal_add_imeis();
  // @@protoc_insertion_point(field_add_mutable:anx.GetImeiNumbersResponse.imeis)
  return _s;
}
inline const std::string& GetImeiNumbersResponse::_internal_imeis(int index) const {
  return _impl_.imeis_.Get(index);
}
inline const std::string& GetImeiNumbersResponse::imeis(int index) const {
  // @@protoc_insertion_point(field_get:anx.GetImeiNumbersResponse.imeis)
  return _internal_imeis(index);
}
inline std::string* GetImeiNumbersResponse::mutable_imeis(int index) {
  // @@protoc_insertion_point(field_mutable:anx.GetImeiNumbersResponse.imeis)
  return _impl_.imeis_.Mutable(index);
}
inline void GetImeiNumbersResponse::set_imeis(int index, const std::string& value) {
  _impl_.imeis_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:anx.GetImeiNumbersResponse.imeis)
}
inline void GetImeiNumbersResponse::set_imeis(int index, std::string&& value) {
  _impl_.imeis_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:anx.GetImeiNumbersResponse.imeis)
}
inline void GetImeiNumbersResponse::set_imeis(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _impl_.imeis_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:anx.GetImeiNumbersResponse.imeis)
}
inline void GetImeiNumbersResponse::set_imeis(int index, const char* value,
                              std::size_t size) {
  _impl_.imeis_.Mutable(index)->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:anx.GetImeiNumbersResponse.imeis)
}
inline void GetImeiNumbersResponse::set_imeis(int index, absl::string_view value) {
  _impl_.imeis_.Mutable(index)->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:anx.GetImeiNumbersResponse.imeis)
}
inline std::string* GetImeiNumbersResponse::_internal_add_imeis() { return _impl_.imeis_.Add(); }
inline void GetImeiNumbersResponse::add_imeis(const std::string& value) {
  _impl_.imeis_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:anx.GetImeiNumbersResponse.imeis)
}
inline void GetImeiNumbersResponse::add_imeis(std::string&& value) {
  _impl_.imeis_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:anx.GetImeiNumbersResponse.imeis)
}
inline void GetImeiNumbersResponse::add_imeis(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _impl_.imeis_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:anx.GetImeiNumbersResponse.imeis)
}
inline void GetImeiNumbersResponse::add_imeis(const char* value, std::size_t size) {
  _impl_.imeis_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:anx.GetImeiNumbersResponse.imeis)
}
inline void GetImeiNumbersResponse::add_imeis(absl::string_view value) {
  _impl_.imeis_.Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:anx.GetImeiNumbersResponse.imeis)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetImeiNumbersResponse::imeis() const {
  // @@protoc_insertion_point(field_list:anx.GetImeiNumbersResponse.imeis)
  return _impl_.imeis_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* GetImeiNumbersResponse::mutable_imeis() {
  // @@protoc_insertion_point(field_mutable_list:anx.GetImeiNumbersResponse.imeis)
  return &_impl_.imeis_;
}

// -------------------------------------------------------------------

// SetWifiRequest

// string ssid = 1;
inline void SetWifiRequest::clear_ssid() {
  _impl_.ssid_.ClearToEmpty();
}
inline const std::string& SetWifiRequest::ssid() const {
  // @@protoc_insertion_point(field_get:anx.SetWifiRequest.ssid)
  return _internal_ssid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetWifiRequest::set_ssid(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.ssid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:anx.SetWifiRequest.ssid)
}
inline std::string* SetWifiRequest::mutable_ssid() {
  std::string* _s = _internal_mutable_ssid();
  // @@protoc_insertion_point(field_mutable:anx.SetWifiRequest.ssid)
  return _s;
}
inline const std::string& SetWifiRequest::_internal_ssid() const {
  return _impl_.ssid_.Get();
}
inline void SetWifiRequest::_internal_set_ssid(const std::string& value) {
  ;


  _impl_.ssid_.Set(value, GetArenaForAllocation());
}
inline std::string* SetWifiRequest::_internal_mutable_ssid() {
  ;
  return _impl_.ssid_.Mutable( GetArenaForAllocation());
}
inline std::string* SetWifiRequest::release_ssid() {
  // @@protoc_insertion_point(field_release:anx.SetWifiRequest.ssid)
  return _impl_.ssid_.Release();
}
inline void SetWifiRequest::set_allocated_ssid(std::string* value) {
  _impl_.ssid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ssid_.IsDefault()) {
          _impl_.ssid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:anx.SetWifiRequest.ssid)
}

// string password = 2;
inline void SetWifiRequest::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& SetWifiRequest::password() const {
  // @@protoc_insertion_point(field_get:anx.SetWifiRequest.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetWifiRequest::set_password(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:anx.SetWifiRequest.password)
}
inline std::string* SetWifiRequest::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:anx.SetWifiRequest.password)
  return _s;
}
inline const std::string& SetWifiRequest::_internal_password() const {
  return _impl_.password_.Get();
}
inline void SetWifiRequest::_internal_set_password(const std::string& value) {
  ;


  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* SetWifiRequest::_internal_mutable_password() {
  ;
  return _impl_.password_.Mutable( GetArenaForAllocation());
}
inline std::string* SetWifiRequest::release_password() {
  // @@protoc_insertion_point(field_release:anx.SetWifiRequest.password)
  return _impl_.password_.Release();
}
inline void SetWifiRequest::set_allocated_password(std::string* value) {
  _impl_.password_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.password_.IsDefault()) {
          _impl_.password_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:anx.SetWifiRequest.password)
}

// -------------------------------------------------------------------

// DeviceLog

// uint32 pid = 1;
inline void DeviceLog::clear_pid() {
  _impl_.pid_ = 0u;
}
inline ::uint32_t DeviceLog::pid() const {
  // @@protoc_insertion_point(field_get:anx.DeviceLog.pid)
  return _internal_pid();
}
inline void DeviceLog::set_pid(::uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:anx.DeviceLog.pid)
}
inline ::uint32_t DeviceLog::_internal_pid() const {
  return _impl_.pid_;
}
inline void DeviceLog::_internal_set_pid(::uint32_t value) {
  ;
  _impl_.pid_ = value;
}

// uint32 tid = 2;
inline void DeviceLog::clear_tid() {
  _impl_.tid_ = 0u;
}
inline ::uint32_t DeviceLog::tid() const {
  // @@protoc_insertion_point(field_get:anx.DeviceLog.tid)
  return _internal_tid();
}
inline void DeviceLog::set_tid(::uint32_t value) {
  _internal_set_tid(value);
  // @@protoc_insertion_point(field_set:anx.DeviceLog.tid)
}
inline ::uint32_t DeviceLog::_internal_tid() const {
  return _impl_.tid_;
}
inline void DeviceLog::_internal_set_tid(::uint32_t value) {
  ;
  _impl_.tid_ = value;
}

// uint64 timestamp = 3;
inline void DeviceLog::clear_timestamp() {
  _impl_.timestamp_ = ::uint64_t{0u};
}
inline ::uint64_t DeviceLog::timestamp() const {
  // @@protoc_insertion_point(field_get:anx.DeviceLog.timestamp)
  return _internal_timestamp();
}
inline void DeviceLog::set_timestamp(::uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:anx.DeviceLog.timestamp)
}
inline ::uint64_t DeviceLog::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline void DeviceLog::_internal_set_timestamp(::uint64_t value) {
  ;
  _impl_.timestamp_ = value;
}

// .anx.DeviceLog.Level level = 4;
inline void DeviceLog::clear_level() {
  _impl_.level_ = 0;
}
inline ::anx::DeviceLog_Level DeviceLog::level() const {
  // @@protoc_insertion_point(field_get:anx.DeviceLog.level)
  return _internal_level();
}
inline void DeviceLog::set_level(::anx::DeviceLog_Level value) {
   _internal_set_level(value);
  // @@protoc_insertion_point(field_set:anx.DeviceLog.level)
}
inline ::anx::DeviceLog_Level DeviceLog::_internal_level() const {
  return static_cast<::anx::DeviceLog_Level>(_impl_.level_);
}
inline void DeviceLog::_internal_set_level(::anx::DeviceLog_Level value) {
  ;
  _impl_.level_ = value;
}

// string tag = 5;
inline void DeviceLog::clear_tag() {
  _impl_.tag_.ClearToEmpty();
}
inline const std::string& DeviceLog::tag() const {
  // @@protoc_insertion_point(field_get:anx.DeviceLog.tag)
  return _internal_tag();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceLog::set_tag(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.tag_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:anx.DeviceLog.tag)
}
inline std::string* DeviceLog::mutable_tag() {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:anx.DeviceLog.tag)
  return _s;
}
inline const std::string& DeviceLog::_internal_tag() const {
  return _impl_.tag_.Get();
}
inline void DeviceLog::_internal_set_tag(const std::string& value) {
  ;


  _impl_.tag_.Set(value, GetArenaForAllocation());
}
inline std::string* DeviceLog::_internal_mutable_tag() {
  ;
  return _impl_.tag_.Mutable( GetArenaForAllocation());
}
inline std::string* DeviceLog::release_tag() {
  // @@protoc_insertion_point(field_release:anx.DeviceLog.tag)
  return _impl_.tag_.Release();
}
inline void DeviceLog::set_allocated_tag(std::string* value) {
  _impl_.tag_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tag_.IsDefault()) {
          _impl_.tag_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:anx.DeviceLog.tag)
}

// string msg = 6;
inline void DeviceLog::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& DeviceLog::msg() const {
  // @@protoc_insertion_point(field_get:anx.DeviceLog.msg)
  return _internal_msg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceLog::set_msg(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.msg_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:anx.DeviceLog.msg)
}
inline std::string* DeviceLog::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:anx.DeviceLog.msg)
  return _s;
}
inline const std::string& DeviceLog::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void DeviceLog::_internal_set_msg(const std::string& value) {
  ;


  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* DeviceLog::_internal_mutable_msg() {
  ;
  return _impl_.msg_.Mutable( GetArenaForAllocation());
}
inline std::string* DeviceLog::release_msg() {
  // @@protoc_insertion_point(field_release:anx.DeviceLog.msg)
  return _impl_.msg_.Release();
}
inline void DeviceLog::set_allocated_msg(std::string* value) {
  _impl_.msg_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.msg_.IsDefault()) {
          _impl_.msg_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:anx.DeviceLog.msg)
}

// -------------------------------------------------------------------

// VersionResponse

// string version = 1;
inline void VersionResponse::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& VersionResponse::version() const {
  // @@protoc_insertion_point(field_get:anx.VersionResponse.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VersionResponse::set_version(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:anx.VersionResponse.version)
}
inline std::string* VersionResponse::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:anx.VersionResponse.version)
  return _s;
}
inline const std::string& VersionResponse::_internal_version() const {
  return _impl_.version_.Get();
}
inline void VersionResponse::_internal_set_version(const std::string& value) {
  ;


  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* VersionResponse::_internal_mutable_version() {
  ;
  return _impl_.version_.Mutable( GetArenaForAllocation());
}
inline std::string* VersionResponse::release_version() {
  // @@protoc_insertion_point(field_release:anx.VersionResponse.version)
  return _impl_.version_.Release();
}
inline void VersionResponse::set_allocated_version(std::string* value) {
  _impl_.version_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.version_.IsDefault()) {
          _impl_.version_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:anx.VersionResponse.version)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace anx


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::anx::DeviceLog_Level> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::anx::DeviceLog_Level>() {
  return ::anx::DeviceLog_Level_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_device_2eproto_2epb_2eh

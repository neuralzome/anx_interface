// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device.proto

#include "device.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace anx {
PROTOBUF_CONSTEXPR GetImeiNumbersResponse::GetImeiNumbersResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.imeis_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetImeiNumbersResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetImeiNumbersResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetImeiNumbersResponseDefaultTypeInternal() {}
  union {
    GetImeiNumbersResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetImeiNumbersResponseDefaultTypeInternal _GetImeiNumbersResponse_default_instance_;
PROTOBUF_CONSTEXPR SetWifiRequest::SetWifiRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ssid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.password_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetWifiRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetWifiRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetWifiRequestDefaultTypeInternal() {}
  union {
    SetWifiRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetWifiRequestDefaultTypeInternal _SetWifiRequest_default_instance_;
PROTOBUF_CONSTEXPR DeviceLog::DeviceLog(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tag_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.msg_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.pid_)*/ 0u

  , /*decltype(_impl_.tid_)*/ 0u

  , /*decltype(_impl_.timestamp_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.level_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceLogDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceLogDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceLogDefaultTypeInternal() {}
  union {
    DeviceLog _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceLogDefaultTypeInternal _DeviceLog_default_instance_;
PROTOBUF_CONSTEXPR VersionResponse::VersionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VersionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VersionResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VersionResponseDefaultTypeInternal() {}
  union {
    VersionResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VersionResponseDefaultTypeInternal _VersionResponse_default_instance_;
}  // namespace anx
static ::_pb::Metadata file_level_metadata_device_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_device_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_device_2eproto = nullptr;
const ::uint32_t TableStruct_device_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::anx::GetImeiNumbersResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anx::GetImeiNumbersResponse, _impl_.imeis_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::anx::SetWifiRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anx::SetWifiRequest, _impl_.ssid_),
    PROTOBUF_FIELD_OFFSET(::anx::SetWifiRequest, _impl_.password_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::anx::DeviceLog, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anx::DeviceLog, _impl_.pid_),
    PROTOBUF_FIELD_OFFSET(::anx::DeviceLog, _impl_.tid_),
    PROTOBUF_FIELD_OFFSET(::anx::DeviceLog, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::anx::DeviceLog, _impl_.level_),
    PROTOBUF_FIELD_OFFSET(::anx::DeviceLog, _impl_.tag_),
    PROTOBUF_FIELD_OFFSET(::anx::DeviceLog, _impl_.msg_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::anx::VersionResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anx::VersionResponse, _impl_.version_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::anx::GetImeiNumbersResponse)},
        { 9, -1, -1, sizeof(::anx::SetWifiRequest)},
        { 19, -1, -1, sizeof(::anx::DeviceLog)},
        { 33, -1, -1, sizeof(::anx::VersionResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::anx::_GetImeiNumbersResponse_default_instance_._instance,
    &::anx::_SetWifiRequest_default_instance_._instance,
    &::anx::_DeviceLog_default_instance_._instance,
    &::anx::_VersionResponse_default_instance_._instance,
};
const char descriptor_table_protodef_device_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\014device.proto\022\003anx\"\'\n\026GetImeiNumbersRes"
    "ponse\022\r\n\005imeis\030\001 \003(\t\"0\n\016SetWifiRequest\022\014"
    "\n\004ssid\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\"\316\001\n\tDevic"
    "eLog\022\013\n\003pid\030\001 \001(\r\022\013\n\003tid\030\002 \001(\r\022\021\n\ttimest"
    "amp\030\003 \001(\004\022#\n\005level\030\004 \001(\0162\024.anx.DeviceLog"
    ".Level\022\013\n\003tag\030\005 \001(\t\022\013\n\003msg\030\006 \001(\t\"U\n\005Leve"
    "l\022\013\n\007VERBOSE\020\000\022\t\n\005DEBUG\020\001\022\t\n\005ERROR\020\002\022\010\n\004"
    "INFO\020\003\022\010\n\004WARN\020\004\022\t\n\005FATAL\020\005\022\n\n\006SILENT\020\006\""
    "\"\n\017VersionResponse\022\017\n\007version\030\001 \001(\tB\033\n\031c"
    "om.flomobility.anx.protob\006proto3"
};
static ::absl::once_flag descriptor_table_device_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_device_2eproto = {
    false,
    false,
    392,
    descriptor_table_protodef_device_2eproto,
    "device.proto",
    &descriptor_table_device_2eproto_once,
    nullptr,
    0,
    4,
    schemas,
    file_default_instances,
    TableStruct_device_2eproto::offsets,
    file_level_metadata_device_2eproto,
    file_level_enum_descriptors_device_2eproto,
    file_level_service_descriptors_device_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_device_2eproto_getter() {
  return &descriptor_table_device_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_device_2eproto(&descriptor_table_device_2eproto);
namespace anx {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceLog_Level_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_device_2eproto);
  return file_level_enum_descriptors_device_2eproto[0];
}
bool DeviceLog_Level_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr DeviceLog_Level DeviceLog::VERBOSE;
constexpr DeviceLog_Level DeviceLog::DEBUG;
constexpr DeviceLog_Level DeviceLog::ERROR;
constexpr DeviceLog_Level DeviceLog::INFO;
constexpr DeviceLog_Level DeviceLog::WARN;
constexpr DeviceLog_Level DeviceLog::FATAL;
constexpr DeviceLog_Level DeviceLog::SILENT;
constexpr DeviceLog_Level DeviceLog::Level_MIN;
constexpr DeviceLog_Level DeviceLog::Level_MAX;
constexpr int DeviceLog::Level_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class GetImeiNumbersResponse::_Internal {
 public:
};

GetImeiNumbersResponse::GetImeiNumbersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anx.GetImeiNumbersResponse)
}
GetImeiNumbersResponse::GetImeiNumbersResponse(const GetImeiNumbersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetImeiNumbersResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.imeis_){from._impl_.imeis_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:anx.GetImeiNumbersResponse)
}

inline void GetImeiNumbersResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.imeis_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetImeiNumbersResponse::~GetImeiNumbersResponse() {
  // @@protoc_insertion_point(destructor:anx.GetImeiNumbersResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetImeiNumbersResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.imeis_.~RepeatedPtrField();
}

void GetImeiNumbersResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetImeiNumbersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:anx.GetImeiNumbersResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.imeis_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetImeiNumbersResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string imeis = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_imeis();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "anx.GetImeiNumbersResponse.imeis"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetImeiNumbersResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anx.GetImeiNumbersResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string imeis = 1;
  for (int i = 0, n = this->_internal_imeis_size(); i < n; ++i) {
    const auto& s = this->_internal_imeis(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "anx.GetImeiNumbersResponse.imeis");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anx.GetImeiNumbersResponse)
  return target;
}

::size_t GetImeiNumbersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anx.GetImeiNumbersResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string imeis = 1;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.imeis_.size());
  for (int i = 0, n = _impl_.imeis_.size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(_impl_.imeis_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetImeiNumbersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetImeiNumbersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetImeiNumbersResponse::GetClassData() const { return &_class_data_; }


void GetImeiNumbersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetImeiNumbersResponse*>(&to_msg);
  auto& from = static_cast<const GetImeiNumbersResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anx.GetImeiNumbersResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.imeis_.MergeFrom(from._impl_.imeis_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetImeiNumbersResponse::CopyFrom(const GetImeiNumbersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anx.GetImeiNumbersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetImeiNumbersResponse::IsInitialized() const {
  return true;
}

void GetImeiNumbersResponse::InternalSwap(GetImeiNumbersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.imeis_.InternalSwap(&other->_impl_.imeis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetImeiNumbersResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_2eproto_getter, &descriptor_table_device_2eproto_once,
      file_level_metadata_device_2eproto[0]);
}
// ===================================================================

class SetWifiRequest::_Internal {
 public:
};

SetWifiRequest::SetWifiRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anx.SetWifiRequest)
}
SetWifiRequest::SetWifiRequest(const SetWifiRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetWifiRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ssid_) {}

    , decltype(_impl_.password_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ssid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ssid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ssid().empty()) {
    _this->_impl_.ssid_.Set(from._internal_ssid(), _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.password_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:anx.SetWifiRequest)
}

inline void SetWifiRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.ssid_) {}

    , decltype(_impl_.password_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ssid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ssid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.password_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetWifiRequest::~SetWifiRequest() {
  // @@protoc_insertion_point(destructor:anx.SetWifiRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetWifiRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ssid_.Destroy();
  _impl_.password_.Destroy();
}

void SetWifiRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetWifiRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:anx.SetWifiRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ssid_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetWifiRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ssid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ssid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "anx.SetWifiRequest.ssid"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "anx.SetWifiRequest.password"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetWifiRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anx.SetWifiRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ssid = 1;
  if (!this->_internal_ssid().empty()) {
    const std::string& _s = this->_internal_ssid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "anx.SetWifiRequest.ssid");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    const std::string& _s = this->_internal_password();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "anx.SetWifiRequest.password");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anx.SetWifiRequest)
  return target;
}

::size_t SetWifiRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anx.SetWifiRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ssid = 1;
  if (!this->_internal_ssid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_ssid());
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_password());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetWifiRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetWifiRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetWifiRequest::GetClassData() const { return &_class_data_; }


void SetWifiRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetWifiRequest*>(&to_msg);
  auto& from = static_cast<const SetWifiRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anx.SetWifiRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ssid().empty()) {
    _this->_internal_set_ssid(from._internal_ssid());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetWifiRequest::CopyFrom(const SetWifiRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anx.SetWifiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetWifiRequest::IsInitialized() const {
  return true;
}

void SetWifiRequest::InternalSwap(SetWifiRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ssid_, lhs_arena,
                                       &other->_impl_.ssid_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.password_, lhs_arena,
                                       &other->_impl_.password_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetWifiRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_2eproto_getter, &descriptor_table_device_2eproto_once,
      file_level_metadata_device_2eproto[1]);
}
// ===================================================================

class DeviceLog::_Internal {
 public:
};

DeviceLog::DeviceLog(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anx.DeviceLog)
}
DeviceLog::DeviceLog(const DeviceLog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceLog* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tag_) {}

    , decltype(_impl_.msg_) {}

    , decltype(_impl_.pid_) {}

    , decltype(_impl_.tid_) {}

    , decltype(_impl_.timestamp_) {}

    , decltype(_impl_.level_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tag_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tag().empty()) {
    _this->_impl_.tag_.Set(from._internal_tag(), _this->GetArenaForAllocation());
  }
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.level_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.level_));
  // @@protoc_insertion_point(copy_constructor:anx.DeviceLog)
}

inline void DeviceLog::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.tag_) {}

    , decltype(_impl_.msg_) {}

    , decltype(_impl_.pid_) { 0u }

    , decltype(_impl_.tid_) { 0u }

    , decltype(_impl_.timestamp_) { ::uint64_t{0u} }

    , decltype(_impl_.level_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tag_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeviceLog::~DeviceLog() {
  // @@protoc_insertion_point(destructor:anx.DeviceLog)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceLog::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tag_.Destroy();
  _impl_.msg_.Destroy();
}

void DeviceLog::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceLog::Clear() {
// @@protoc_insertion_point(message_clear_start:anx.DeviceLog)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tag_.ClearToEmpty();
  _impl_.msg_.ClearToEmpty();
  ::memset(&_impl_.pid_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.level_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceLog::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 tid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.tid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .anx.DeviceLog.Level level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_level(static_cast<::anx::DeviceLog_Level>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string tag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "anx.DeviceLog.tag"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string msg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "anx.DeviceLog.msg"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DeviceLog::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anx.DeviceLog)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_pid(), target);
  }

  // uint32 tid = 2;
  if (this->_internal_tid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_tid(), target);
  }

  // uint64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_timestamp(), target);
  }

  // .anx.DeviceLog.Level level = 4;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_level(), target);
  }

  // string tag = 5;
  if (!this->_internal_tag().empty()) {
    const std::string& _s = this->_internal_tag();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "anx.DeviceLog.tag");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string msg = 6;
  if (!this->_internal_msg().empty()) {
    const std::string& _s = this->_internal_msg();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "anx.DeviceLog.msg");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anx.DeviceLog)
  return target;
}

::size_t DeviceLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anx.DeviceLog)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tag = 5;
  if (!this->_internal_tag().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_tag());
  }

  // string msg = 6;
  if (!this->_internal_msg().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_msg());
  }

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_pid());
  }

  // uint32 tid = 2;
  if (this->_internal_tid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_tid());
  }

  // uint64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_timestamp());
  }

  // .anx.DeviceLog.Level level = 4;
  if (this->_internal_level() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceLog::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceLog::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceLog::GetClassData() const { return &_class_data_; }


void DeviceLog::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceLog*>(&to_msg);
  auto& from = static_cast<const DeviceLog&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anx.DeviceLog)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tag().empty()) {
    _this->_internal_set_tag(from._internal_tag());
  }
  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_tid() != 0) {
    _this->_internal_set_tid(from._internal_tid());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceLog::CopyFrom(const DeviceLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anx.DeviceLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceLog::IsInitialized() const {
  return true;
}

void DeviceLog::InternalSwap(DeviceLog* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tag_, lhs_arena,
                                       &other->_impl_.tag_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.msg_, lhs_arena,
                                       &other->_impl_.msg_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceLog, _impl_.level_)
      + sizeof(DeviceLog::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(DeviceLog, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceLog::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_2eproto_getter, &descriptor_table_device_2eproto_once,
      file_level_metadata_device_2eproto[2]);
}
// ===================================================================

class VersionResponse::_Internal {
 public:
};

VersionResponse::VersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anx.VersionResponse)
}
VersionResponse::VersionResponse(const VersionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VersionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:anx.VersionResponse)
}

inline void VersionResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.version_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VersionResponse::~VersionResponse() {
  // @@protoc_insertion_point(destructor:anx.VersionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VersionResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.Destroy();
}

void VersionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VersionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:anx.VersionResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VersionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "anx.VersionResponse.version"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* VersionResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anx.VersionResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    const std::string& _s = this->_internal_version();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "anx.VersionResponse.version");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anx.VersionResponse)
  return target;
}

::size_t VersionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anx.VersionResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VersionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VersionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VersionResponse::GetClassData() const { return &_class_data_; }


void VersionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VersionResponse*>(&to_msg);
  auto& from = static_cast<const VersionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anx.VersionResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VersionResponse::CopyFrom(const VersionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anx.VersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionResponse::IsInitialized() const {
  return true;
}

void VersionResponse::InternalSwap(VersionResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.version_, lhs_arena,
                                       &other->_impl_.version_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata VersionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_2eproto_getter, &descriptor_table_device_2eproto_once,
      file_level_metadata_device_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace anx
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::anx::GetImeiNumbersResponse*
Arena::CreateMaybeMessage< ::anx::GetImeiNumbersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::anx::GetImeiNumbersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::anx::SetWifiRequest*
Arena::CreateMaybeMessage< ::anx::SetWifiRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::anx::SetWifiRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::anx::DeviceLog*
Arena::CreateMaybeMessage< ::anx::DeviceLog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::anx::DeviceLog >(arena);
}
template<> PROTOBUF_NOINLINE ::anx::VersionResponse*
Arena::CreateMaybeMessage< ::anx::VersionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::anx::VersionResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
